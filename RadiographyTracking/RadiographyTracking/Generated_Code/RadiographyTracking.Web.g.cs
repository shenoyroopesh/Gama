//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RadiographyTracking
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using RadiographyTracking.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace RadiographyTracking.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using RadiographyTracking.Web.Resources;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("RadiographyTracking-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _customerCompany;
        
        private string _foundry;
        
        private string _friendlyName;
        
        private string _role;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerCompanyChanging(string value);
        partial void OnCustomerCompanyChanged();
        partial void OnFoundryChanging(string value);
        partial void OnFoundryChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnRoleChanging(string value);
        partial void OnRoleChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerCompany' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Customer Company", Order=6)]
        public string CustomerCompany
        {
            get
            {
                return this._customerCompany;
            }
            set
            {
                if ((this._customerCompany != value))
                {
                    this.OnCustomerCompanyChanging(value);
                    this.RaiseDataMemberChanging("CustomerCompany");
                    this.ValidateProperty("CustomerCompany", value);
                    this._customerCompany = value;
                    this.RaiseDataMemberChanged("CustomerCompany");
                    this.OnCustomerCompanyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Foundry' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Foundry", Order=4)]
        public string Foundry
        {
            get
            {
                return this._foundry;
            }
            set
            {
                if ((this._foundry != value))
                {
                    this.OnFoundryChanging(value);
                    this.RaiseDataMemberChanging("Foundry");
                    this.ValidateProperty("Foundry", value);
                    this._foundry = value;
                    this.RaiseDataMemberChanged("Foundry");
                    this.OnFoundryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Role' value.
        /// </summary>
        [DataMember()]
        [Display(Name="Role", Order=5)]
        public string Role
        {
            get
            {
                return this._role;
            }
            set
            {
                if ((this._role != value))
                {
                    this.OnRoleChanging(value);
                    this.RaiseDataMemberChanging("Role");
                    this.ValidateProperty("Role", value);
                    this._role = value;
                    this.RaiseDataMemberChanged("Role");
                    this.OnRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _customerCompany;
        
        private string _foundry;
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerCompanyChanging(string value);
        partial void OnCustomerCompanyChanged();
        partial void OnFoundryChanging(string value);
        partial void OnFoundryChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerCompany' value.
        /// </summary>
        [DataMember()]
        public string CustomerCompany
        {
            get
            {
                return this._customerCompany;
            }
            set
            {
                if ((this._customerCompany != value))
                {
                    this.OnCustomerCompanyChanging(value);
                    this.RaiseDataMemberChanging("CustomerCompany");
                    this.ValidateProperty("CustomerCompany", value);
                    this._customerCompany = value;
                    this.RaiseDataMemberChanged("CustomerCompany");
                    this.OnCustomerCompanyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Foundry' value.
        /// </summary>
        [DataMember()]
        public string Foundry
        {
            get
            {
                return this._foundry;
            }
            set
            {
                if ((this._foundry != value))
                {
                    this.OnFoundryChanging(value);
                    this.RaiseDataMemberChanging("Foundry");
                    this.ValidateProperty("Foundry", value);
                    this._foundry = value;
                    this.RaiseDataMemberChanged("Foundry");
                    this.OnFoundryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("RadiographyTracking-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ChangePassword' method of the DomainService.
        /// </summary>
        /// <param name="oldPassword">The value for the 'oldPassword' parameter of this action.</param>
        /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ChangePassword(string oldPassword, string newPassword, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldPassword", oldPassword);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ChangePassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ChangePassword", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ChangePassword' method of the DomainService.
        /// </summary>
        /// <param name="oldPassword">The value for the 'oldPassword' parameter of this action.</param>
        /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ChangePassword(string oldPassword, string newPassword)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("oldPassword", oldPassword);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ChangePassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ChangePassword", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation CreateUser(RegistrationData user, [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] string password, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return this.InvokeOperation("CreateUser", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation CreateUser(RegistrationData user, [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return this.InvokeOperation("CreateUser", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteUser(string userName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("DeleteUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteUser", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteUser(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("DeleteUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteUser", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EditUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EditUser(RegistrationData user, string password, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("EditUser", parameters);
            return this.InvokeOperation("EditUser", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EditUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EditUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("EditUser", parameters);
            return this.InvokeOperation("EditUser", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUsers' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<RegistrationData>> GetUsers(Action<InvokeOperation<IEnumerable<RegistrationData>>> callback, object userState)
        {
            this.ValidateMethod("GetUsers", null);
            return ((InvokeOperation<IEnumerable<RegistrationData>>)(this.InvokeOperation("GetUsers", typeof(IEnumerable<RegistrationData>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUsers' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<RegistrationData>> GetUsers()
        {
            this.ValidateMethod("GetUsers", null);
            return ((InvokeOperation<IEnumerable<RegistrationData>>)(this.InvokeOperation("GetUsers", typeof(IEnumerable<RegistrationData>), null, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'ChangePassword' operation.
            /// </summary>
            /// <param name="oldPassword">The value for the 'oldPassword' parameter of this action.</param>
            /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/ChangePasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/ChangePassword", ReplyAction="http://tempuri.org/UserRegistrationService/ChangePasswordResponse")]
            IAsyncResult BeginChangePassword(string oldPassword, string newPassword, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginChangePassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginChangePassword'.</param>
            /// <returns>The 'Boolean' returned from the 'ChangePassword' operation.</returns>
            bool EndChangePassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            void EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/DeleteUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/DeleteUser", ReplyAction="http://tempuri.org/UserRegistrationService/DeleteUserResponse")]
            IAsyncResult BeginDeleteUser(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteUser'.</param>
            /// <returns>The 'Boolean' returned from the 'DeleteUser' operation.</returns>
            bool EndDeleteUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EditUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/EditUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/EditUser", ReplyAction="http://tempuri.org/UserRegistrationService/EditUserResponse")]
            IAsyncResult BeginEditUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEditUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEditUser'.</param>
            void EndEditUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetUsers' operation.</returns>
            IEnumerable<RegistrationData> EndGetUsers(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
namespace RadiographyTracking.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using RadiographyTracking.Web.Resources;
    
    
    /// <summary>
    /// The 'AddressStickerRow' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class AddressStickerRow : ComplexObject
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressStickerRow"/> class.
        /// </summary>
        public AddressStickerRow()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'Change' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Change : Entity
    {
        
        private string _byWhom;
        
        private string _fromValue;
        
        private int _id;
        
        private string _toValue;
        
        private string _what;
        
        private DateTime _when;
        
        private string _where;
        
        private string _why;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnByWhomChanging(string value);
        partial void OnByWhomChanged();
        partial void OnFromValueChanging(string value);
        partial void OnFromValueChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnToValueChanging(string value);
        partial void OnToValueChanged();
        partial void OnWhatChanging(string value);
        partial void OnWhatChanged();
        partial void OnWhenChanging(DateTime value);
        partial void OnWhenChanged();
        partial void OnWhereChanging(string value);
        partial void OnWhereChanged();
        partial void OnWhyChanging(string value);
        partial void OnWhyChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Change"/> class.
        /// </summary>
        public Change()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ByWhom' value.
        /// </summary>
        [DataMember()]
        public string ByWhom
        {
            get
            {
                return this._byWhom;
            }
            set
            {
                if ((this._byWhom != value))
                {
                    this.OnByWhomChanging(value);
                    this.RaiseDataMemberChanging("ByWhom");
                    this.ValidateProperty("ByWhom", value);
                    this._byWhom = value;
                    this.RaiseDataMemberChanged("ByWhom");
                    this.OnByWhomChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FromValue' value.
        /// </summary>
        [DataMember()]
        public string FromValue
        {
            get
            {
                return this._fromValue;
            }
            set
            {
                if ((this._fromValue != value))
                {
                    this.OnFromValueChanging(value);
                    this.RaiseDataMemberChanging("FromValue");
                    this.ValidateProperty("FromValue", value);
                    this._fromValue = value;
                    this.RaiseDataMemberChanged("FromValue");
                    this.OnFromValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ToValue' value.
        /// </summary>
        [DataMember()]
        public string ToValue
        {
            get
            {
                return this._toValue;
            }
            set
            {
                if ((this._toValue != value))
                {
                    this.OnToValueChanging(value);
                    this.RaiseDataMemberChanging("ToValue");
                    this.ValidateProperty("ToValue", value);
                    this._toValue = value;
                    this.RaiseDataMemberChanged("ToValue");
                    this.OnToValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'What' value.
        /// </summary>
        [DataMember()]
        public string What
        {
            get
            {
                return this._what;
            }
            set
            {
                if ((this._what != value))
                {
                    this.OnWhatChanging(value);
                    this.RaiseDataMemberChanging("What");
                    this.ValidateProperty("What", value);
                    this._what = value;
                    this.RaiseDataMemberChanged("What");
                    this.OnWhatChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'When' value.
        /// </summary>
        [DataMember()]
        public DateTime When
        {
            get
            {
                return this._when;
            }
            set
            {
                if ((this._when != value))
                {
                    this.OnWhenChanging(value);
                    this.RaiseDataMemberChanging("When");
                    this.ValidateProperty("When", value);
                    this._when = value;
                    this.RaiseDataMemberChanged("When");
                    this.OnWhenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Where' value.
        /// </summary>
        [DataMember()]
        public string Where
        {
            get
            {
                return this._where;
            }
            set
            {
                if ((this._where != value))
                {
                    this.OnWhereChanging(value);
                    this.RaiseDataMemberChanging("Where");
                    this.ValidateProperty("Where", value);
                    this._where = value;
                    this.RaiseDataMemberChanged("Where");
                    this.OnWhereChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Why' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Why
        {
            get
            {
                return this._why;
            }
            set
            {
                if ((this._why != value))
                {
                    this.OnWhyChanging(value);
                    this.RaiseDataMemberChanging("Why");
                    this.ValidateProperty("Why", value);
                    this._why = value;
                    this.RaiseDataMemberChanged("Why");
                    this.OnWhyChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Company : Entity
    {
        
        private string _address;
        
        private string _email;
        
        private int _id;
        
        private EntityRef<UploadedFile> _logo;
        
        private Nullable<int> _logoID;
        
        private string _name;
        
        private string _phoneNo;
        
        private string _shortName;
        
        private string _webSite;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLogoIDChanging(Nullable<int> value);
        partial void OnLogoIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhoneNoChanging(string value);
        partial void OnPhoneNoChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnWebSiteChanging(string value);
        partial void OnWebSiteChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Display(Order=3)]
        [Required(ErrorMessage="Address for the Company cannot be empty")]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Order=4)]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UploadedFile"/> entity.
        /// </summary>
        [Association("UploadedFile_Company", "LogoID", "ID", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        public UploadedFile Logo
        {
            get
            {
                if ((this._logo == null))
                {
                    this._logo = new EntityRef<UploadedFile>(this, "Logo", this.FilterLogo);
                }
                return this._logo.Entity;
            }
            set
            {
                UploadedFile previous = this.Logo;
                if ((previous != value))
                {
                    this.ValidateProperty("Logo", value);
                    if ((value != null))
                    {
                        this.LogoID = value.ID;
                    }
                    else
                    {
                        this.LogoID = default(Nullable<int>);
                    }
                    this._logo.Entity = value;
                    this.RaisePropertyChanged("Logo");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogoID' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [RoundtripOriginal()]
        public Nullable<int> LogoID
        {
            get
            {
                return this._logoID;
            }
            set
            {
                if ((this._logoID != value))
                {
                    this.OnLogoIDChanging(value);
                    this.RaiseDataMemberChanging("LogoID");
                    this.ValidateProperty("LogoID", value);
                    this._logoID = value;
                    this.RaiseDataMemberChanged("LogoID");
                    this.OnLogoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(Description="This is the name that will be used in Final Printable Reports", Order=1)]
        [Required(ErrorMessage="Name of the company cannot be empty")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNo' value.
        /// </summary>
        [DataMember()]
        [Display(Order=6)]
        public string PhoneNo
        {
            get
            {
                return this._phoneNo;
            }
            set
            {
                if ((this._phoneNo != value))
                {
                    this.OnPhoneNoChanging(value);
                    this.RaiseDataMemberChanging("PhoneNo");
                    this.ValidateProperty("PhoneNo", value);
                    this._phoneNo = value;
                    this.RaiseDataMemberChanged("PhoneNo");
                    this.OnPhoneNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShortName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Short Name is used everywhere except final reports", Order=2)]
        [Required(ErrorMessage="Short Name of the company cannot be empty")]
        public string ShortName
        {
            get
            {
                return this._shortName;
            }
            set
            {
                if ((this._shortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.RaiseDataMemberChanging("ShortName");
                    this.ValidateProperty("ShortName", value);
                    this._shortName = value;
                    this.RaiseDataMemberChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WebSite' value.
        /// </summary>
        [DataMember()]
        [Display(Order=5)]
        public string WebSite
        {
            get
            {
                return this._webSite;
            }
            set
            {
                if ((this._webSite != value))
                {
                    this.OnWebSiteChanging(value);
                    this.RaiseDataMemberChanging("WebSite");
                    this.ValidateProperty("WebSite", value);
                    this._webSite = value;
                    this.RaiseDataMemberChanged("WebSite");
                    this.OnWebSiteChanged();
                }
            }
        }
        
        private bool FilterLogo(UploadedFile entity)
        {
            return (entity.ID == this.LogoID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Coverage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Coverage : Entity
    {
        
        private string _coverageName;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCoverageNameChanging(string value);
        partial void OnCoverageNameChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Coverage"/> class.
        /// </summary>
        public Coverage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CoverageName' value.
        /// </summary>
        [DataMember()]
        public string CoverageName
        {
            get
            {
                return this._coverageName;
            }
            set
            {
                if ((this._coverageName != value))
                {
                    this.OnCoverageNameChanging(value);
                    this.RaiseDataMemberChanging("CoverageName");
                    this.ValidateProperty("CoverageName", value);
                    this._coverageName = value;
                    this.RaiseDataMemberChanged("CoverageName");
                    this.OnCoverageNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Customer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Customer : Entity
    {
        
        private string _address;
        
        private string _customerName;
        
        private string _email;
        
        private EntityRef<Foundry> _foundry;
        
        private int _foundryID;
        
        private int _id;
        
        private EntityRef<UploadedFile> _logo;
        
        private Nullable<int> _logoID;
        
        private string _phoneNo;
        
        private string _shortName;
        
        private string _webSite;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFoundryIDChanging(int value);
        partial void OnFoundryIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLogoIDChanging(Nullable<int> value);
        partial void OnLogoIDChanged();
        partial void OnPhoneNoChanging(string value);
        partial void OnPhoneNoChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnWebSiteChanging(string value);
        partial void OnWebSiteChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        public Customer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Address for the Customer cannot be empty")]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerName' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Name of the Customer cannot be empty")]
        public string CustomerName
        {
            get
            {
                return this._customerName;
            }
            set
            {
                if ((this._customerName != value))
                {
                    this.OnCustomerNameChanging(value);
                    this.RaiseDataMemberChanging("CustomerName");
                    this.ValidateProperty("CustomerName", value);
                    this._customerName = value;
                    this.RaiseDataMemberChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Foundry"/> entity.
        /// </summary>
        [Association("Foundry_Customer", "FoundryID", "ID", IsForeignKey=true)]
        public Foundry Foundry
        {
            get
            {
                if ((this._foundry == null))
                {
                    this._foundry = new EntityRef<Foundry>(this, "Foundry", this.FilterFoundry);
                }
                return this._foundry.Entity;
            }
            set
            {
                Foundry previous = this.Foundry;
                if ((previous != value))
                {
                    this.ValidateProperty("Foundry", value);
                    if ((previous != null))
                    {
                        this._foundry.Entity = null;
                        previous.Customers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FoundryID = value.ID;
                    }
                    else
                    {
                        this.FoundryID = default(int);
                    }
                    this._foundry.Entity = value;
                    if ((value != null))
                    {
                        value.Customers.Add(this);
                    }
                    this.RaisePropertyChanged("Foundry");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FoundryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FoundryID
        {
            get
            {
                return this._foundryID;
            }
            set
            {
                if ((this._foundryID != value))
                {
                    this.OnFoundryIDChanging(value);
                    this.RaiseDataMemberChanging("FoundryID");
                    this.ValidateProperty("FoundryID", value);
                    this._foundryID = value;
                    this.RaiseDataMemberChanged("FoundryID");
                    this.OnFoundryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UploadedFile"/> entity.
        /// </summary>
        [Association("UploadedFile_Customer", "LogoID", "ID", IsForeignKey=true)]
        public UploadedFile Logo
        {
            get
            {
                if ((this._logo == null))
                {
                    this._logo = new EntityRef<UploadedFile>(this, "Logo", this.FilterLogo);
                }
                return this._logo.Entity;
            }
            set
            {
                UploadedFile previous = this.Logo;
                if ((previous != value))
                {
                    this.ValidateProperty("Logo", value);
                    if ((value != null))
                    {
                        this.LogoID = value.ID;
                    }
                    else
                    {
                        this.LogoID = default(Nullable<int>);
                    }
                    this._logo.Entity = value;
                    this.RaisePropertyChanged("Logo");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogoID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> LogoID
        {
            get
            {
                return this._logoID;
            }
            set
            {
                if ((this._logoID != value))
                {
                    this.OnLogoIDChanging(value);
                    this.RaiseDataMemberChanging("LogoID");
                    this.ValidateProperty("LogoID", value);
                    this._logoID = value;
                    this.RaiseDataMemberChanged("LogoID");
                    this.OnLogoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNo' value.
        /// </summary>
        [DataMember()]
        public string PhoneNo
        {
            get
            {
                return this._phoneNo;
            }
            set
            {
                if ((this._phoneNo != value))
                {
                    this.OnPhoneNoChanging(value);
                    this.RaiseDataMemberChanging("PhoneNo");
                    this.ValidateProperty("PhoneNo", value);
                    this._phoneNo = value;
                    this.RaiseDataMemberChanged("PhoneNo");
                    this.OnPhoneNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShortName' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Short Name of the Customer cannot be empty")]
        public string ShortName
        {
            get
            {
                return this._shortName;
            }
            set
            {
                if ((this._shortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.RaiseDataMemberChanging("ShortName");
                    this.ValidateProperty("ShortName", value);
                    this._shortName = value;
                    this.RaiseDataMemberChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WebSite' value.
        /// </summary>
        [DataMember()]
        public string WebSite
        {
            get
            {
                return this._webSite;
            }
            set
            {
                if ((this._webSite != value))
                {
                    this.OnWebSiteChanging(value);
                    this.RaiseDataMemberChanging("WebSite");
                    this.ValidateProperty("WebSite", value);
                    this._webSite = value;
                    this.RaiseDataMemberChanged("WebSite");
                    this.OnWebSiteChanged();
                }
            }
        }
        
        private bool FilterFoundry(Foundry entity)
        {
            return (entity.ID == this.FoundryID);
        }
        
        private bool FilterLogo(UploadedFile entity)
        {
            return (entity.ID == this.LogoID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Defect' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Defect : Entity
    {
        
        private string _code;
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Defect"/> class.
        /// </summary>
        public Defect()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Direction' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Direction : Entity
    {
        
        private int _id;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Direction"/> class.
        /// </summary>
        public Direction()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Energy' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Energy : Entity
    {
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Energy"/> class.
        /// </summary>
        public Energy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Name is required")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FilmAreaRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FilmAreaRow : Entity
    {
        
        private string _filmSize;
        
        private Guid _id;
        
        private int _rt;
        
        private Guid _shiftWisePerformanceRowID;
        
        private int _total;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFilmSizeChanging(string value);
        partial void OnFilmSizeChanged();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnRTChanging(int value);
        partial void OnRTChanged();
        partial void OnShiftWisePerformanceRowIDChanging(Guid value);
        partial void OnShiftWisePerformanceRowIDChanged();
        partial void OnTotalChanging(int value);
        partial void OnTotalChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FilmAreaRow"/> class.
        /// </summary>
        public FilmAreaRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSize' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string FilmSize
        {
            get
            {
                return this._filmSize;
            }
            set
            {
                if ((this._filmSize != value))
                {
                    this.OnFilmSizeChanging(value);
                    this.RaiseDataMemberChanging("FilmSize");
                    this.ValidateProperty("FilmSize", value);
                    this._filmSize = value;
                    this.RaiseDataMemberChanged("FilmSize");
                    this.OnFilmSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RT' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int RT
        {
            get
            {
                return this._rt;
            }
            set
            {
                if ((this._rt != value))
                {
                    this.OnRTChanging(value);
                    this.RaiseDataMemberChanging("RT");
                    this.ValidateProperty("RT", value);
                    this._rt = value;
                    this.RaiseDataMemberChanged("RT");
                    this.OnRTChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftWisePerformanceRowID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public Guid ShiftWisePerformanceRowID
        {
            get
            {
                return this._shiftWisePerformanceRowID;
            }
            set
            {
                if ((this._shiftWisePerformanceRowID != value))
                {
                    this.OnShiftWisePerformanceRowIDChanging(value);
                    this.RaiseDataMemberChanging("ShiftWisePerformanceRowID");
                    this.ValidateProperty("ShiftWisePerformanceRowID", value);
                    this._shiftWisePerformanceRowID = value;
                    this.RaiseDataMemberChanged("ShiftWisePerformanceRowID");
                    this.OnShiftWisePerformanceRowIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Total' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OnTotalChanging(value);
                    this.RaiseDataMemberChanging("Total");
                    this.ValidateProperty("Total", value);
                    this._total = value;
                    this.RaiseDataMemberChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FilmConsumptionReportRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FilmConsumptionReportRow : Entity
    {
        
        private float _area;
        
        private string _date;
        
        private string _energy;
        
        private string _fpNo;
        
        private Guid _id;
        
        private string _reportNo;
        
        private string _rowType;
        
        private string _rtNo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAreaChanging(float value);
        partial void OnAreaChanged();
        partial void OnDateChanging(string value);
        partial void OnDateChanged();
        partial void OnEnergyChanging(string value);
        partial void OnEnergyChanged();
        partial void OnFPNoChanging(string value);
        partial void OnFPNoChanged();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnReportNoChanging(string value);
        partial void OnReportNoChanged();
        partial void OnRowTypeChanging(string value);
        partial void OnRowTypeChanged();
        partial void OnRTNoChanging(string value);
        partial void OnRTNoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FilmConsumptionReportRow"/> class.
        /// </summary>
        public FilmConsumptionReportRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Area' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public float Area
        {
            get
            {
                return this._area;
            }
            set
            {
                if ((this._area != value))
                {
                    this.OnAreaChanging(value);
                    this.RaiseDataMemberChanging("Area");
                    this.ValidateProperty("Area", value);
                    this._area = value;
                    this.RaiseDataMemberChanged("Area");
                    this.OnAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Energy' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Energy
        {
            get
            {
                return this._energy;
            }
            set
            {
                if ((this._energy != value))
                {
                    this.OnEnergyChanging(value);
                    this.RaiseDataMemberChanging("Energy");
                    this.ValidateProperty("Energy", value);
                    this._energy = value;
                    this.RaiseDataMemberChanged("Energy");
                    this.OnEnergyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FPNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string FPNo
        {
            get
            {
                return this._fpNo;
            }
            set
            {
                if ((this._fpNo != value))
                {
                    this.OnFPNoChanging(value);
                    this.RaiseDataMemberChanging("FPNo");
                    this.ValidateProperty("FPNo", value);
                    this._fpNo = value;
                    this.RaiseDataMemberChanged("FPNo");
                    this.OnFPNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ReportNo
        {
            get
            {
                return this._reportNo;
            }
            set
            {
                if ((this._reportNo != value))
                {
                    this.OnReportNoChanging(value);
                    this.RaiseDataMemberChanging("ReportNo");
                    this.ValidateProperty("ReportNo", value);
                    this._reportNo = value;
                    this.RaiseDataMemberChanged("ReportNo");
                    this.OnReportNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowType' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string RowType
        {
            get
            {
                return this._rowType;
            }
            set
            {
                if ((this._rowType != value))
                {
                    this.OnRowTypeChanging(value);
                    this.RaiseDataMemberChanging("RowType");
                    this.ValidateProperty("RowType", value);
                    this._rowType = value;
                    this.RaiseDataMemberChanged("RowType");
                    this.OnRowTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RTNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string RTNo
        {
            get
            {
                return this._rtNo;
            }
            set
            {
                if ((this._rtNo != value))
                {
                    this.OnRTNoChanging(value);
                    this.RaiseDataMemberChanging("RTNo");
                    this.ValidateProperty("RTNo", value);
                    this._rtNo = value;
                    this.RaiseDataMemberChanged("RTNo");
                    this.OnRTNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FilmSize' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FilmSize : Entity
    {
        
        private float _area;
        
        private int _id;
        
        private float _length;
        
        private string _name;
        
        private float _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAreaChanging(float value);
        partial void OnAreaChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLengthChanging(float value);
        partial void OnLengthChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnWidthChanging(float value);
        partial void OnWidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FilmSize"/> class.
        /// </summary>
        public FilmSize()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Area' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public float Area
        {
            get
            {
                return this._area;
            }
            set
            {
                if ((this._area != value))
                {
                    this.OnAreaChanging(value);
                    this.ValidateProperty("Area", value);
                    this._area = value;
                    this.RaisePropertyChanged("Area");
                    this.OnAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Length' value.
        /// </summary>
        [DataMember()]
        public float Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    this.OnLengthChanging(value);
                    this.RaiseDataMemberChanging("Length");
                    this.ValidateProperty("Length", value);
                    this._length = value;
                    this.RaiseDataMemberChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public float Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FilmStockReportRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FilmStockReportRow : Entity
    {
        
        private float _closingStock;
        
        private float _consumed;
        
        private DateTime _date;
        
        private Guid _id;
        
        private float _openingStock;
        
        private float _receivedFromHO;
        
        private float _sentToHO;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClosingStockChanging(float value);
        partial void OnClosingStockChanged();
        partial void OnConsumedChanging(float value);
        partial void OnConsumedChanged();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnOpeningStockChanging(float value);
        partial void OnOpeningStockChanged();
        partial void OnReceivedFromHOChanging(float value);
        partial void OnReceivedFromHOChanged();
        partial void OnSentToHOChanging(float value);
        partial void OnSentToHOChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FilmStockReportRow"/> class.
        /// </summary>
        public FilmStockReportRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClosingStock' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public float ClosingStock
        {
            get
            {
                return this._closingStock;
            }
            set
            {
                if ((this._closingStock != value))
                {
                    this.OnClosingStockChanging(value);
                    this.RaiseDataMemberChanging("ClosingStock");
                    this.ValidateProperty("ClosingStock", value);
                    this._closingStock = value;
                    this.RaiseDataMemberChanged("ClosingStock");
                    this.OnClosingStockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Consumed' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public float Consumed
        {
            get
            {
                return this._consumed;
            }
            set
            {
                if ((this._consumed != value))
                {
                    this.OnConsumedChanging(value);
                    this.RaiseDataMemberChanging("Consumed");
                    this.ValidateProperty("Consumed", value);
                    this._consumed = value;
                    this.RaiseDataMemberChanged("Consumed");
                    this.OnConsumedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpeningStock' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public float OpeningStock
        {
            get
            {
                return this._openingStock;
            }
            set
            {
                if ((this._openingStock != value))
                {
                    this.OnOpeningStockChanging(value);
                    this.RaiseDataMemberChanging("OpeningStock");
                    this.ValidateProperty("OpeningStock", value);
                    this._openingStock = value;
                    this.RaiseDataMemberChanged("OpeningStock");
                    this.OnOpeningStockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceivedFromHO' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public float ReceivedFromHO
        {
            get
            {
                return this._receivedFromHO;
            }
            set
            {
                if ((this._receivedFromHO != value))
                {
                    this.OnReceivedFromHOChanging(value);
                    this.RaiseDataMemberChanging("ReceivedFromHO");
                    this.ValidateProperty("ReceivedFromHO", value);
                    this._receivedFromHO = value;
                    this.RaiseDataMemberChanged("ReceivedFromHO");
                    this.OnReceivedFromHOChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SentToHO' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public float SentToHO
        {
            get
            {
                return this._sentToHO;
            }
            set
            {
                if ((this._sentToHO != value))
                {
                    this.OnSentToHOChanging(value);
                    this.RaiseDataMemberChanging("SentToHO");
                    this.ValidateProperty("SentToHO", value);
                    this._sentToHO = value;
                    this.RaiseDataMemberChanged("SentToHO");
                    this.OnSentToHOChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FilmTransaction' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FilmTransaction : Entity
    {
        
        private float _area;
        
        private string _challanNo;
        
        private DateTime _date;
        
        private EntityRef<Direction> _direction;
        
        private int _directionID;
        
        private EntityRef<Foundry> _foundry;
        
        private int _foundryID;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAreaChanging(float value);
        partial void OnAreaChanged();
        partial void OnChallanNoChanging(string value);
        partial void OnChallanNoChanged();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnDirectionIDChanging(int value);
        partial void OnDirectionIDChanged();
        partial void OnFoundryIDChanging(int value);
        partial void OnFoundryIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FilmTransaction"/> class.
        /// </summary>
        public FilmTransaction()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Area' value.
        /// </summary>
        [DataMember()]
        public float Area
        {
            get
            {
                return this._area;
            }
            set
            {
                if ((this._area != value))
                {
                    this.OnAreaChanging(value);
                    this.RaiseDataMemberChanging("Area");
                    this.ValidateProperty("Area", value);
                    this._area = value;
                    this.RaiseDataMemberChanged("Area");
                    this.OnAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChallanNo' value.
        /// </summary>
        [DataMember()]
        public string ChallanNo
        {
            get
            {
                return this._challanNo;
            }
            set
            {
                if ((this._challanNo != value))
                {
                    this.OnChallanNoChanging(value);
                    this.RaiseDataMemberChanging("ChallanNo");
                    this.ValidateProperty("ChallanNo", value);
                    this._challanNo = value;
                    this.RaiseDataMemberChanged("ChallanNo");
                    this.OnChallanNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Direction"/> entity.
        /// </summary>
        [Association("Direction_FilmTransaction", "DirectionID", "ID", IsForeignKey=true)]
        public Direction Direction
        {
            get
            {
                if ((this._direction == null))
                {
                    this._direction = new EntityRef<Direction>(this, "Direction", this.FilterDirection);
                }
                return this._direction.Entity;
            }
            set
            {
                Direction previous = this.Direction;
                if ((previous != value))
                {
                    this.ValidateProperty("Direction", value);
                    if ((value != null))
                    {
                        this.DirectionID = value.ID;
                    }
                    else
                    {
                        this.DirectionID = default(int);
                    }
                    this._direction.Entity = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DirectionID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int DirectionID
        {
            get
            {
                return this._directionID;
            }
            set
            {
                if ((this._directionID != value))
                {
                    this.OnDirectionIDChanging(value);
                    this.RaiseDataMemberChanging("DirectionID");
                    this.ValidateProperty("DirectionID", value);
                    this._directionID = value;
                    this.RaiseDataMemberChanged("DirectionID");
                    this.OnDirectionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Foundry"/> entity.
        /// </summary>
        [Association("Foundry_FilmTransaction", "FoundryID", "ID", IsForeignKey=true)]
        public Foundry Foundry
        {
            get
            {
                if ((this._foundry == null))
                {
                    this._foundry = new EntityRef<Foundry>(this, "Foundry", this.FilterFoundry);
                }
                return this._foundry.Entity;
            }
            set
            {
                Foundry previous = this.Foundry;
                if ((previous != value))
                {
                    this.ValidateProperty("Foundry", value);
                    if ((value != null))
                    {
                        this.FoundryID = value.ID;
                    }
                    else
                    {
                        this.FoundryID = default(int);
                    }
                    this._foundry.Entity = value;
                    this.RaisePropertyChanged("Foundry");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FoundryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FoundryID
        {
            get
            {
                return this._foundryID;
            }
            set
            {
                if ((this._foundryID != value))
                {
                    this.OnFoundryIDChanging(value);
                    this.RaiseDataMemberChanging("FoundryID");
                    this.ValidateProperty("FoundryID", value);
                    this._foundryID = value;
                    this.RaiseDataMemberChanged("FoundryID");
                    this.OnFoundryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private bool FilterDirection(Direction entity)
        {
            return (entity.ID == this.DirectionID);
        }
        
        private bool FilterFoundry(Foundry entity)
        {
            return (entity.ID == this.FoundryID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FinalRTReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FinalRTReport : Entity
    {
        
        private string _acceptanceAsPer;
        
        private EntityRef<Coverage> _coverage;
        
        private int _coverageID;
        
        private string _dateOfTest;
        
        private string _drawingNo;
        
        private string _evaluationAsPer;
        
        private string _film;
        
        private EntityCollection<FinalRTReportRow> _finalRTReportRows;
        
        private EntityRef<FixedPattern> _fixedPattern;
        
        private int _fixedPatternID;
        
        private string _heatNo;
        
        private int _id;
        
        private string _leadScreen;
        
        private string _procedureRef;
        
        private string _reportDate;
        
        private string _reportNo;
        
        private IEnumerable<string> _reportTemplatesList;
        
        private string _reportTypeNo;
        
        private string _result;
        
        private string _rtNo;
        
        private EntityRef<Shift> _shift;
        
        private int _shiftID;
        
        private string _sourceSize;
        
        private string _specifications;
        
        private EntityRef<RGStatus> _status;
        
        private int _statusID;
        
        private string _totalArea;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptanceAsPerChanging(string value);
        partial void OnAcceptanceAsPerChanged();
        partial void OnCoverageIDChanging(int value);
        partial void OnCoverageIDChanged();
        partial void OnDateOfTestChanging(string value);
        partial void OnDateOfTestChanged();
        partial void OnDrawingNoChanging(string value);
        partial void OnDrawingNoChanged();
        partial void OnEvaluationAsPerChanging(string value);
        partial void OnEvaluationAsPerChanged();
        partial void OnFilmChanging(string value);
        partial void OnFilmChanged();
        partial void OnFixedPatternIDChanging(int value);
        partial void OnFixedPatternIDChanged();
        partial void OnHeatNoChanging(string value);
        partial void OnHeatNoChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLeadScreenChanging(string value);
        partial void OnLeadScreenChanged();
        partial void OnProcedureRefChanging(string value);
        partial void OnProcedureRefChanged();
        partial void OnReportDateChanging(string value);
        partial void OnReportDateChanged();
        partial void OnReportNoChanging(string value);
        partial void OnReportNoChanged();
        partial void OnReportTemplatesListChanging(IEnumerable<string> value);
        partial void OnReportTemplatesListChanged();
        partial void OnReportTypeNoChanging(string value);
        partial void OnReportTypeNoChanged();
        partial void OnResultChanging(string value);
        partial void OnResultChanged();
        partial void OnRTNoChanging(string value);
        partial void OnRTNoChanged();
        partial void OnShiftIDChanging(int value);
        partial void OnShiftIDChanged();
        partial void OnSourceSizeChanging(string value);
        partial void OnSourceSizeChanged();
        partial void OnSpecificationsChanging(string value);
        partial void OnSpecificationsChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();
        partial void OnTotalAreaChanging(string value);
        partial void OnTotalAreaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FinalRTReport"/> class.
        /// </summary>
        public FinalRTReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcceptanceAsPer' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string AcceptanceAsPer
        {
            get
            {
                return this._acceptanceAsPer;
            }
            set
            {
                if ((this._acceptanceAsPer != value))
                {
                    this.OnAcceptanceAsPerChanging(value);
                    this.RaiseDataMemberChanging("AcceptanceAsPer");
                    this.ValidateProperty("AcceptanceAsPer", value);
                    this._acceptanceAsPer = value;
                    this.RaiseDataMemberChanged("AcceptanceAsPer");
                    this.OnAcceptanceAsPerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Coverage"/> entity.
        /// </summary>
        [Association("Coverage_FinalRTReport", "CoverageID", "ID", IsForeignKey=true)]
        public Coverage Coverage
        {
            get
            {
                if ((this._coverage == null))
                {
                    this._coverage = new EntityRef<Coverage>(this, "Coverage", this.FilterCoverage);
                }
                return this._coverage.Entity;
            }
            set
            {
                Coverage previous = this.Coverage;
                if ((previous != value))
                {
                    this.ValidateProperty("Coverage", value);
                    if ((value != null))
                    {
                        this.CoverageID = value.ID;
                    }
                    else
                    {
                        this.CoverageID = default(int);
                    }
                    this._coverage.Entity = value;
                    this.RaisePropertyChanged("Coverage");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CoverageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CoverageID
        {
            get
            {
                return this._coverageID;
            }
            set
            {
                if ((this._coverageID != value))
                {
                    this.OnCoverageIDChanging(value);
                    this.RaiseDataMemberChanging("CoverageID");
                    this.ValidateProperty("CoverageID", value);
                    this._coverageID = value;
                    this.RaiseDataMemberChanged("CoverageID");
                    this.OnCoverageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfTest' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string DateOfTest
        {
            get
            {
                return this._dateOfTest;
            }
            set
            {
                if ((this._dateOfTest != value))
                {
                    this.OnDateOfTestChanging(value);
                    this.RaiseDataMemberChanging("DateOfTest");
                    this.ValidateProperty("DateOfTest", value);
                    this._dateOfTest = value;
                    this.RaiseDataMemberChanged("DateOfTest");
                    this.OnDateOfTestChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawingNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string DrawingNo
        {
            get
            {
                return this._drawingNo;
            }
            set
            {
                if ((this._drawingNo != value))
                {
                    this.OnDrawingNoChanging(value);
                    this.RaiseDataMemberChanging("DrawingNo");
                    this.ValidateProperty("DrawingNo", value);
                    this._drawingNo = value;
                    this.RaiseDataMemberChanged("DrawingNo");
                    this.OnDrawingNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EvaluationAsPer' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string EvaluationAsPer
        {
            get
            {
                return this._evaluationAsPer;
            }
            set
            {
                if ((this._evaluationAsPer != value))
                {
                    this.OnEvaluationAsPerChanging(value);
                    this.RaiseDataMemberChanging("EvaluationAsPer");
                    this.ValidateProperty("EvaluationAsPer", value);
                    this._evaluationAsPer = value;
                    this.RaiseDataMemberChanged("EvaluationAsPer");
                    this.OnEvaluationAsPerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Film' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Film
        {
            get
            {
                return this._film;
            }
            set
            {
                if ((this._film != value))
                {
                    this.OnFilmChanging(value);
                    this.RaiseDataMemberChanging("Film");
                    this.ValidateProperty("Film", value);
                    this._film = value;
                    this.RaiseDataMemberChanged("Film");
                    this.OnFilmChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="FinalRTReportRow"/> entity instances.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [Association("FinalRTReport", "ID", "FinalRTReportID")]
        public EntityCollection<FinalRTReportRow> FinalRTReportRows
        {
            get
            {
                if ((this._finalRTReportRows == null))
                {
                    this._finalRTReportRows = new EntityCollection<FinalRTReportRow>(this, "FinalRTReportRows", this.FilterFinalRTReportRows);
                }
                return this._finalRTReportRows;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FixedPattern"/> entity.
        /// </summary>
        [Association("FixedPattern_FinalRTReport", "FixedPatternID", "ID", IsForeignKey=true)]
        public FixedPattern FixedPattern
        {
            get
            {
                if ((this._fixedPattern == null))
                {
                    this._fixedPattern = new EntityRef<FixedPattern>(this, "FixedPattern", this.FilterFixedPattern);
                }
                return this._fixedPattern.Entity;
            }
            set
            {
                FixedPattern previous = this.FixedPattern;
                if ((previous != value))
                {
                    this.ValidateProperty("FixedPattern", value);
                    if ((value != null))
                    {
                        this.FixedPatternID = value.ID;
                    }
                    else
                    {
                        this.FixedPatternID = default(int);
                    }
                    this._fixedPattern.Entity = value;
                    this.RaisePropertyChanged("FixedPattern");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FixedPatternID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FixedPatternID
        {
            get
            {
                return this._fixedPatternID;
            }
            set
            {
                if ((this._fixedPatternID != value))
                {
                    this.OnFixedPatternIDChanging(value);
                    this.RaiseDataMemberChanging("FixedPatternID");
                    this.ValidateProperty("FixedPatternID", value);
                    this._fixedPatternID = value;
                    this.RaiseDataMemberChanged("FixedPatternID");
                    this.OnFixedPatternIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HeatNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string HeatNo
        {
            get
            {
                return this._heatNo;
            }
            set
            {
                if ((this._heatNo != value))
                {
                    this.OnHeatNoChanging(value);
                    this.RaiseDataMemberChanging("HeatNo");
                    this.ValidateProperty("HeatNo", value);
                    this._heatNo = value;
                    this.RaiseDataMemberChanged("HeatNo");
                    this.OnHeatNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeadScreen' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string LeadScreen
        {
            get
            {
                return this._leadScreen;
            }
            set
            {
                if ((this._leadScreen != value))
                {
                    this.OnLeadScreenChanging(value);
                    this.RaiseDataMemberChanging("LeadScreen");
                    this.ValidateProperty("LeadScreen", value);
                    this._leadScreen = value;
                    this.RaiseDataMemberChanged("LeadScreen");
                    this.OnLeadScreenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProcedureRef' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ProcedureRef
        {
            get
            {
                return this._procedureRef;
            }
            set
            {
                if ((this._procedureRef != value))
                {
                    this.OnProcedureRefChanging(value);
                    this.RaiseDataMemberChanging("ProcedureRef");
                    this.ValidateProperty("ProcedureRef", value);
                    this._procedureRef = value;
                    this.RaiseDataMemberChanged("ProcedureRef");
                    this.OnProcedureRefChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportDate' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ReportDate
        {
            get
            {
                return this._reportDate;
            }
            set
            {
                if ((this._reportDate != value))
                {
                    this.OnReportDateChanging(value);
                    this.RaiseDataMemberChanging("ReportDate");
                    this.ValidateProperty("ReportDate", value);
                    this._reportDate = value;
                    this.RaiseDataMemberChanged("ReportDate");
                    this.OnReportDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ReportNo
        {
            get
            {
                return this._reportNo;
            }
            set
            {
                if ((this._reportNo != value))
                {
                    this.OnReportNoChanging(value);
                    this.RaiseDataMemberChanging("ReportNo");
                    this.ValidateProperty("ReportNo", value);
                    this._reportNo = value;
                    this.RaiseDataMemberChanged("ReportNo");
                    this.OnReportNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportTemplatesList' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public IEnumerable<string> ReportTemplatesList
        {
            get
            {
                return this._reportTemplatesList;
            }
            set
            {
                if ((this._reportTemplatesList != value))
                {
                    this.OnReportTemplatesListChanging(value);
                    this.ValidateProperty("ReportTemplatesList", value);
                    this._reportTemplatesList = value;
                    this.RaisePropertyChanged("ReportTemplatesList");
                    this.OnReportTemplatesListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportTypeNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ReportTypeNo
        {
            get
            {
                return this._reportTypeNo;
            }
            set
            {
                if ((this._reportTypeNo != value))
                {
                    this.OnReportTypeNoChanging(value);
                    this.RaiseDataMemberChanging("ReportTypeNo");
                    this.ValidateProperty("ReportTypeNo", value);
                    this._reportTypeNo = value;
                    this.RaiseDataMemberChanged("ReportTypeNo");
                    this.OnReportTypeNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Result' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Result
        {
            get
            {
                return this._result;
            }
            set
            {
                if ((this._result != value))
                {
                    this.OnResultChanging(value);
                    this.RaiseDataMemberChanging("Result");
                    this.ValidateProperty("Result", value);
                    this._result = value;
                    this.RaiseDataMemberChanged("Result");
                    this.OnResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RTNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string RTNo
        {
            get
            {
                return this._rtNo;
            }
            set
            {
                if ((this._rtNo != value))
                {
                    this.OnRTNoChanging(value);
                    this.RaiseDataMemberChanging("RTNo");
                    this.ValidateProperty("RTNo", value);
                    this._rtNo = value;
                    this.RaiseDataMemberChanged("RTNo");
                    this.OnRTNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Shift"/> entity.
        /// </summary>
        [Association("Shift_FinalRTReport", "ShiftID", "ID", IsForeignKey=true)]
        public Shift Shift
        {
            get
            {
                if ((this._shift == null))
                {
                    this._shift = new EntityRef<Shift>(this, "Shift", this.FilterShift);
                }
                return this._shift.Entity;
            }
            set
            {
                Shift previous = this.Shift;
                if ((previous != value))
                {
                    this.ValidateProperty("Shift", value);
                    if ((value != null))
                    {
                        this.ShiftID = value.ID;
                    }
                    else
                    {
                        this.ShiftID = default(int);
                    }
                    this._shift.Entity = value;
                    this.RaisePropertyChanged("Shift");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ShiftID
        {
            get
            {
                return this._shiftID;
            }
            set
            {
                if ((this._shiftID != value))
                {
                    this.OnShiftIDChanging(value);
                    this.RaiseDataMemberChanging("ShiftID");
                    this.ValidateProperty("ShiftID", value);
                    this._shiftID = value;
                    this.RaiseDataMemberChanged("ShiftID");
                    this.OnShiftIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SourceSize' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string SourceSize
        {
            get
            {
                return this._sourceSize;
            }
            set
            {
                if ((this._sourceSize != value))
                {
                    this.OnSourceSizeChanging(value);
                    this.RaiseDataMemberChanging("SourceSize");
                    this.ValidateProperty("SourceSize", value);
                    this._sourceSize = value;
                    this.RaiseDataMemberChanged("SourceSize");
                    this.OnSourceSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Specifications' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Specifications
        {
            get
            {
                return this._specifications;
            }
            set
            {
                if ((this._specifications != value))
                {
                    this.OnSpecificationsChanging(value);
                    this.RaiseDataMemberChanging("Specifications");
                    this.ValidateProperty("Specifications", value);
                    this._specifications = value;
                    this.RaiseDataMemberChanged("Specifications");
                    this.OnSpecificationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RGStatus"/> entity.
        /// </summary>
        [Association("RGStatus_FinalRTReport", "StatusID", "ID", IsForeignKey=true)]
        public RGStatus Status
        {
            get
            {
                if ((this._status == null))
                {
                    this._status = new EntityRef<RGStatus>(this, "Status", this.FilterStatus);
                }
                return this._status.Entity;
            }
            set
            {
                RGStatus previous = this.Status;
                if ((previous != value))
                {
                    this.ValidateProperty("Status", value);
                    if ((value != null))
                    {
                        this.StatusID = value.ID;
                    }
                    else
                    {
                        this.StatusID = default(int);
                    }
                    this._status.Entity = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int StatusID
        {
            get
            {
                return this._statusID;
            }
            set
            {
                if ((this._statusID != value))
                {
                    this.OnStatusIDChanging(value);
                    this.RaiseDataMemberChanging("StatusID");
                    this.ValidateProperty("StatusID", value);
                    this._statusID = value;
                    this.RaiseDataMemberChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalArea' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string TotalArea
        {
            get
            {
                return this._totalArea;
            }
            set
            {
                if ((this._totalArea != value))
                {
                    this.OnTotalAreaChanging(value);
                    this.ValidateProperty("TotalArea", value);
                    this._totalArea = value;
                    this.RaisePropertyChanged("TotalArea");
                    this.OnTotalAreaChanged();
                }
            }
        }
        
        private bool FilterCoverage(Coverage entity)
        {
            return (entity.ID == this.CoverageID);
        }
        
        private bool FilterFinalRTReportRows(FinalRTReportRow entity)
        {
            return (entity.FinalRTReportID == this.ID);
        }
        
        private bool FilterFixedPattern(FixedPattern entity)
        {
            return (entity.ID == this.FixedPatternID);
        }
        
        private bool FilterShift(Shift entity)
        {
            return (entity.ID == this.ShiftID);
        }
        
        private bool FilterStatus(RGStatus entity)
        {
            return (entity.ID == this.StatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FinalRTReportRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FinalRTReportRow : Entity
    {
        
        private string _density;
        
        private string _designation;
        
        private EntityRef<Energy> _energy;
        
        private int _energyID;
        
        private int _filmCount;
        
        private EntityRef<FilmSize> _filmSize;
        
        private int _filmSizeID;
        
        private string _filmSizeString;
        
        private string _filmSizeWithCount;
        
        private int _finalRTReportID;
        
        private int _id;
        
        private string _location;
        
        private string _observations;
        
        private Nullable<int> _remarkID;
        
        private string _remarkText;
        
        private int _rowTypeID;
        
        private string _segment;
        
        private string _sensitivity;
        
        private int _sfd;
        
        private int _slNo;
        
        private Nullable<int> _technicianID;
        
        private string _technicianText;
        
        private string _technique;
        
        private int _thickness;
        
        private string _thicknessRange;
        
        private Nullable<int> _welderID;
        
        private string _welderText;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDensityChanging(string value);
        partial void OnDensityChanged();
        partial void OnDesignationChanging(string value);
        partial void OnDesignationChanged();
        partial void OnEnergyIDChanging(int value);
        partial void OnEnergyIDChanged();
        partial void OnFilmCountChanging(int value);
        partial void OnFilmCountChanged();
        partial void OnFilmSizeIDChanging(int value);
        partial void OnFilmSizeIDChanged();
        partial void OnFilmSizeStringChanging(string value);
        partial void OnFilmSizeStringChanged();
        partial void OnFilmSizeWithCountChanging(string value);
        partial void OnFilmSizeWithCountChanged();
        partial void OnFinalRTReportIDChanging(int value);
        partial void OnFinalRTReportIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnObservationsChanging(string value);
        partial void OnObservationsChanged();
        partial void OnRemarkIDChanging(Nullable<int> value);
        partial void OnRemarkIDChanged();
        partial void OnRemarkTextChanging(string value);
        partial void OnRemarkTextChanged();
        partial void OnRowTypeIDChanging(int value);
        partial void OnRowTypeIDChanged();
        partial void OnSegmentChanging(string value);
        partial void OnSegmentChanged();
        partial void OnSensitivityChanging(string value);
        partial void OnSensitivityChanged();
        partial void OnSFDChanging(int value);
        partial void OnSFDChanged();
        partial void OnSlNoChanging(int value);
        partial void OnSlNoChanged();
        partial void OnTechnicianIDChanging(Nullable<int> value);
        partial void OnTechnicianIDChanged();
        partial void OnTechnicianTextChanging(string value);
        partial void OnTechnicianTextChanged();
        partial void OnTechniqueChanging(string value);
        partial void OnTechniqueChanged();
        partial void OnThicknessChanging(int value);
        partial void OnThicknessChanged();
        partial void OnThicknessRangeChanging(string value);
        partial void OnThicknessRangeChanged();
        partial void OnWelderIDChanging(Nullable<int> value);
        partial void OnWelderIDChanged();
        partial void OnWelderTextChanging(string value);
        partial void OnWelderTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FinalRTReportRow"/> class.
        /// </summary>
        public FinalRTReportRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Density' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Density
        {
            get
            {
                return this._density;
            }
            set
            {
                if ((this._density != value))
                {
                    this.OnDensityChanging(value);
                    this.RaiseDataMemberChanging("Density");
                    this.ValidateProperty("Density", value);
                    this._density = value;
                    this.RaiseDataMemberChanged("Density");
                    this.OnDensityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Designation' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Designation
        {
            get
            {
                return this._designation;
            }
            set
            {
                if ((this._designation != value))
                {
                    this.OnDesignationChanging(value);
                    this.RaiseDataMemberChanging("Designation");
                    this.ValidateProperty("Designation", value);
                    this._designation = value;
                    this.RaiseDataMemberChanged("Designation");
                    this.OnDesignationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Energy"/> entity.
        /// </summary>
        [Association("Energy_FinalRTReportRow", "EnergyID", "ID", IsForeignKey=true)]
        public Energy Energy
        {
            get
            {
                if ((this._energy == null))
                {
                    this._energy = new EntityRef<Energy>(this, "Energy", this.FilterEnergy);
                }
                return this._energy.Entity;
            }
            set
            {
                Energy previous = this.Energy;
                if ((previous != value))
                {
                    this.ValidateProperty("Energy", value);
                    if ((value != null))
                    {
                        this.EnergyID = value.ID;
                    }
                    else
                    {
                        this.EnergyID = default(int);
                    }
                    this._energy.Entity = value;
                    this.RaisePropertyChanged("Energy");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnergyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int EnergyID
        {
            get
            {
                return this._energyID;
            }
            set
            {
                if ((this._energyID != value))
                {
                    this.OnEnergyIDChanging(value);
                    this.RaiseDataMemberChanging("EnergyID");
                    this.ValidateProperty("EnergyID", value);
                    this._energyID = value;
                    this.RaiseDataMemberChanged("EnergyID");
                    this.OnEnergyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmCount' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int FilmCount
        {
            get
            {
                return this._filmCount;
            }
            set
            {
                if ((this._filmCount != value))
                {
                    this.OnFilmCountChanging(value);
                    this.RaiseDataMemberChanging("FilmCount");
                    this.ValidateProperty("FilmCount", value);
                    this._filmCount = value;
                    this.RaiseDataMemberChanged("FilmCount");
                    this.OnFilmCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FilmSize"/> entity.
        /// </summary>
        [Association("FilmSize_FinalRTReportRow", "FilmSizeID", "ID", IsForeignKey=true)]
        public FilmSize FilmSize
        {
            get
            {
                if ((this._filmSize == null))
                {
                    this._filmSize = new EntityRef<FilmSize>(this, "FilmSize", this.FilterFilmSize);
                }
                return this._filmSize.Entity;
            }
            set
            {
                FilmSize previous = this.FilmSize;
                if ((previous != value))
                {
                    this.ValidateProperty("FilmSize", value);
                    if ((value != null))
                    {
                        this.FilmSizeID = value.ID;
                    }
                    else
                    {
                        this.FilmSizeID = default(int);
                    }
                    this._filmSize.Entity = value;
                    this.RaisePropertyChanged("FilmSize");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FilmSizeID
        {
            get
            {
                return this._filmSizeID;
            }
            set
            {
                if ((this._filmSizeID != value))
                {
                    this.OnFilmSizeIDChanging(value);
                    this.RaiseDataMemberChanging("FilmSizeID");
                    this.ValidateProperty("FilmSizeID", value);
                    this._filmSizeID = value;
                    this.RaiseDataMemberChanged("FilmSizeID");
                    this.OnFilmSizeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeString' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string FilmSizeString
        {
            get
            {
                return this._filmSizeString;
            }
            set
            {
                if ((this._filmSizeString != value))
                {
                    this.OnFilmSizeStringChanging(value);
                    this.RaiseDataMemberChanging("FilmSizeString");
                    this.ValidateProperty("FilmSizeString", value);
                    this._filmSizeString = value;
                    this.RaiseDataMemberChanged("FilmSizeString");
                    this.OnFilmSizeStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeWithCount' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string FilmSizeWithCount
        {
            get
            {
                return this._filmSizeWithCount;
            }
            set
            {
                if ((this._filmSizeWithCount != value))
                {
                    this.OnFilmSizeWithCountChanging(value);
                    this.RaiseDataMemberChanging("FilmSizeWithCount");
                    this.ValidateProperty("FilmSizeWithCount", value);
                    this._filmSizeWithCount = value;
                    this.RaiseDataMemberChanged("FilmSizeWithCount");
                    this.OnFilmSizeWithCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FinalRTReportID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int FinalRTReportID
        {
            get
            {
                return this._finalRTReportID;
            }
            set
            {
                if ((this._finalRTReportID != value))
                {
                    this.OnFinalRTReportIDChanging(value);
                    this.RaiseDataMemberChanging("FinalRTReportID");
                    this.ValidateProperty("FinalRTReportID", value);
                    this._finalRTReportID = value;
                    this.RaiseDataMemberChanged("FinalRTReportID");
                    this.OnFinalRTReportIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RemarkID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public Nullable<int> RemarkID
        {
            get
            {
                return this._remarkID;
            }
            set
            {
                if ((this._remarkID != value))
                {
                    this.OnRemarkIDChanging(value);
                    this.RaiseDataMemberChanging("RemarkID");
                    this.ValidateProperty("RemarkID", value);
                    this._remarkID = value;
                    this.RaiseDataMemberChanged("RemarkID");
                    this.OnRemarkIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RemarkText' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string RemarkText
        {
            get
            {
                return this._remarkText;
            }
            set
            {
                if ((this._remarkText != value))
                {
                    this.OnRemarkTextChanging(value);
                    this.RaiseDataMemberChanging("RemarkText");
                    this.ValidateProperty("RemarkText", value);
                    this._remarkText = value;
                    this.RaiseDataMemberChanged("RemarkText");
                    this.OnRemarkTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowTypeID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int RowTypeID
        {
            get
            {
                return this._rowTypeID;
            }
            set
            {
                if ((this._rowTypeID != value))
                {
                    this.OnRowTypeIDChanging(value);
                    this.RaiseDataMemberChanging("RowTypeID");
                    this.ValidateProperty("RowTypeID", value);
                    this._rowTypeID = value;
                    this.RaiseDataMemberChanged("RowTypeID");
                    this.OnRowTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Segment' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Segment
        {
            get
            {
                return this._segment;
            }
            set
            {
                if ((this._segment != value))
                {
                    this.OnSegmentChanging(value);
                    this.RaiseDataMemberChanging("Segment");
                    this.ValidateProperty("Segment", value);
                    this._segment = value;
                    this.RaiseDataMemberChanged("Segment");
                    this.OnSegmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sensitivity' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Sensitivity
        {
            get
            {
                return this._sensitivity;
            }
            set
            {
                if ((this._sensitivity != value))
                {
                    this.OnSensitivityChanging(value);
                    this.RaiseDataMemberChanging("Sensitivity");
                    this.ValidateProperty("Sensitivity", value);
                    this._sensitivity = value;
                    this.RaiseDataMemberChanged("Sensitivity");
                    this.OnSensitivityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SFD' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int SFD
        {
            get
            {
                return this._sfd;
            }
            set
            {
                if ((this._sfd != value))
                {
                    this.OnSFDChanging(value);
                    this.RaiseDataMemberChanging("SFD");
                    this.ValidateProperty("SFD", value);
                    this._sfd = value;
                    this.RaiseDataMemberChanged("SFD");
                    this.OnSFDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int SlNo
        {
            get
            {
                return this._slNo;
            }
            set
            {
                if ((this._slNo != value))
                {
                    this.OnSlNoChanging(value);
                    this.RaiseDataMemberChanging("SlNo");
                    this.ValidateProperty("SlNo", value);
                    this._slNo = value;
                    this.RaiseDataMemberChanged("SlNo");
                    this.OnSlNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TechnicianID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public Nullable<int> TechnicianID
        {
            get
            {
                return this._technicianID;
            }
            set
            {
                if ((this._technicianID != value))
                {
                    this.OnTechnicianIDChanging(value);
                    this.RaiseDataMemberChanging("TechnicianID");
                    this.ValidateProperty("TechnicianID", value);
                    this._technicianID = value;
                    this.RaiseDataMemberChanged("TechnicianID");
                    this.OnTechnicianIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TechnicianText' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string TechnicianText
        {
            get
            {
                return this._technicianText;
            }
            set
            {
                if ((this._technicianText != value))
                {
                    this.OnTechnicianTextChanging(value);
                    this.RaiseDataMemberChanging("TechnicianText");
                    this.ValidateProperty("TechnicianText", value);
                    this._technicianText = value;
                    this.RaiseDataMemberChanged("TechnicianText");
                    this.OnTechnicianTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Technique' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Technique
        {
            get
            {
                return this._technique;
            }
            set
            {
                if ((this._technique != value))
                {
                    this.OnTechniqueChanging(value);
                    this.RaiseDataMemberChanging("Technique");
                    this.ValidateProperty("Technique", value);
                    this._technique = value;
                    this.RaiseDataMemberChanged("Technique");
                    this.OnTechniqueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Thickness' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int Thickness
        {
            get
            {
                return this._thickness;
            }
            set
            {
                if ((this._thickness != value))
                {
                    this.OnThicknessChanging(value);
                    this.RaiseDataMemberChanging("Thickness");
                    this.ValidateProperty("Thickness", value);
                    this._thickness = value;
                    this.RaiseDataMemberChanged("Thickness");
                    this.OnThicknessChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThicknessRange' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ThicknessRange
        {
            get
            {
                return this._thicknessRange;
            }
            set
            {
                if ((this._thicknessRange != value))
                {
                    this.OnThicknessRangeChanging(value);
                    this.RaiseDataMemberChanging("ThicknessRange");
                    this.ValidateProperty("ThicknessRange", value);
                    this._thicknessRange = value;
                    this.RaiseDataMemberChanged("ThicknessRange");
                    this.OnThicknessRangeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WelderID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public Nullable<int> WelderID
        {
            get
            {
                return this._welderID;
            }
            set
            {
                if ((this._welderID != value))
                {
                    this.OnWelderIDChanging(value);
                    this.RaiseDataMemberChanging("WelderID");
                    this.ValidateProperty("WelderID", value);
                    this._welderID = value;
                    this.RaiseDataMemberChanged("WelderID");
                    this.OnWelderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WelderText' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string WelderText
        {
            get
            {
                return this._welderText;
            }
            set
            {
                if ((this._welderText != value))
                {
                    this.OnWelderTextChanging(value);
                    this.RaiseDataMemberChanging("WelderText");
                    this.ValidateProperty("WelderText", value);
                    this._welderText = value;
                    this.RaiseDataMemberChanged("WelderText");
                    this.OnWelderTextChanged();
                }
            }
        }
        
        private bool FilterEnergy(Energy entity)
        {
            return (entity.ID == this.EnergyID);
        }
        
        private bool FilterFilmSize(FilmSize entity)
        {
            return (entity.ID == this.FilmSizeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FixedPattern' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FixedPattern : Entity
    {
        
        private EntityRef<Customer> _customer;
        
        private int _customerID;
        
        private string _description;
        
        private string _fpNo;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnFPNoChanging(string value);
        partial void OnFPNoChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedPattern"/> class.
        /// </summary>
        public FixedPattern()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Customer_FixedPattern", "CustomerID", "ID", IsForeignKey=true)]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((value != null))
                    {
                        this.CustomerID = value.ID;
                    }
                    else
                    {
                        this.CustomerID = default(int);
                    }
                    this._customer.Entity = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.RaiseDataMemberChanging("CustomerID");
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaiseDataMemberChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FPNo' value.
        /// </summary>
        [DataMember()]
        public string FPNo
        {
            get
            {
                return this._fpNo;
            }
            set
            {
                if ((this._fpNo != value))
                {
                    this.OnFPNoChanging(value);
                    this.RaiseDataMemberChanging("FPNo");
                    this.ValidateProperty("FPNo", value);
                    this._fpNo = value;
                    this.RaiseDataMemberChanged("FPNo");
                    this.OnFPNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.ID == this.CustomerID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FixedPatternPerformanceRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FixedPatternPerformanceRow : Entity
    {
        
        private DateTime _date;
        
        private Guid _id;
        
        private EntityCollection<LocationClass> _locations;
        
        private string _reportNo;
        
        private string _rtNo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnReportNoChanging(string value);
        partial void OnReportNoChanged();
        partial void OnRTNoChanging(string value);
        partial void OnRTNoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedPatternPerformanceRow"/> class.
        /// </summary>
        public FixedPatternPerformanceRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="LocationClass"/> entity instances.
        /// </summary>
        [Association("LocationClass", "ID", "FixedPatternPerformanceRowID")]
        public EntityCollection<LocationClass> Locations
        {
            get
            {
                if ((this._locations == null))
                {
                    this._locations = new EntityCollection<LocationClass>(this, "Locations", this.FilterLocations);
                }
                return this._locations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ReportNo
        {
            get
            {
                return this._reportNo;
            }
            set
            {
                if ((this._reportNo != value))
                {
                    this.OnReportNoChanging(value);
                    this.RaiseDataMemberChanging("ReportNo");
                    this.ValidateProperty("ReportNo", value);
                    this._reportNo = value;
                    this.RaiseDataMemberChanged("ReportNo");
                    this.OnReportNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RTNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string RTNo
        {
            get
            {
                return this._rtNo;
            }
            set
            {
                if ((this._rtNo != value))
                {
                    this.OnRTNoChanging(value);
                    this.RaiseDataMemberChanging("RTNo");
                    this.ValidateProperty("RTNo", value);
                    this._rtNo = value;
                    this.RaiseDataMemberChanged("RTNo");
                    this.OnRTNoChanged();
                }
            }
        }
        
        private bool FilterLocations(LocationClass entity)
        {
            return (entity.FixedPatternPerformanceRowID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FixedPatternTemplate' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FixedPatternTemplate : Entity
    {
        
        private EntityRef<Coverage> _coverage;
        
        private int _coverageID;
        
        private EntityRef<FixedPattern> _fixedPattern;
        
        private Nullable<int> _fixedPatternID;
        
        private EntityCollection<FPTemplateRow> _fpTemplateRows;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCoverageIDChanging(int value);
        partial void OnCoverageIDChanged();
        partial void OnFixedPatternIDChanging(Nullable<int> value);
        partial void OnFixedPatternIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedPatternTemplate"/> class.
        /// </summary>
        public FixedPatternTemplate()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Coverage"/> entity.
        /// </summary>
        [Association("Coverage_FixedPatternTemplate", "CoverageID", "ID", IsForeignKey=true)]
        public Coverage Coverage
        {
            get
            {
                if ((this._coverage == null))
                {
                    this._coverage = new EntityRef<Coverage>(this, "Coverage", this.FilterCoverage);
                }
                return this._coverage.Entity;
            }
            set
            {
                Coverage previous = this.Coverage;
                if ((previous != value))
                {
                    this.ValidateProperty("Coverage", value);
                    if ((value != null))
                    {
                        this.CoverageID = value.ID;
                    }
                    else
                    {
                        this.CoverageID = default(int);
                    }
                    this._coverage.Entity = value;
                    this.RaisePropertyChanged("Coverage");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CoverageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CoverageID
        {
            get
            {
                return this._coverageID;
            }
            set
            {
                if ((this._coverageID != value))
                {
                    this.OnCoverageIDChanging(value);
                    this.RaiseDataMemberChanging("CoverageID");
                    this.ValidateProperty("CoverageID", value);
                    this._coverageID = value;
                    this.RaiseDataMemberChanged("CoverageID");
                    this.OnCoverageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FixedPattern"/> entity.
        /// </summary>
        [Association("FixedPattern_FixedPatternTemplate", "FixedPatternID", "ID", IsForeignKey=true)]
        public FixedPattern FixedPattern
        {
            get
            {
                if ((this._fixedPattern == null))
                {
                    this._fixedPattern = new EntityRef<FixedPattern>(this, "FixedPattern", this.FilterFixedPattern);
                }
                return this._fixedPattern.Entity;
            }
            set
            {
                FixedPattern previous = this.FixedPattern;
                if ((previous != value))
                {
                    this.ValidateProperty("FixedPattern", value);
                    if ((value != null))
                    {
                        this.FixedPatternID = value.ID;
                    }
                    else
                    {
                        this.FixedPatternID = default(Nullable<int>);
                    }
                    this._fixedPattern.Entity = value;
                    this.RaisePropertyChanged("FixedPattern");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FixedPatternID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> FixedPatternID
        {
            get
            {
                return this._fixedPatternID;
            }
            set
            {
                if ((this._fixedPatternID != value))
                {
                    this.OnFixedPatternIDChanging(value);
                    this.RaiseDataMemberChanging("FixedPatternID");
                    this.ValidateProperty("FixedPatternID", value);
                    this._fixedPatternID = value;
                    this.RaiseDataMemberChanged("FixedPatternID");
                    this.OnFixedPatternIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="FPTemplateRow"/> entity instances.
        /// </summary>
        [Association("FixedPatternTemplate_FPTemplateRow", "ID", "FixedPatternTemplateID")]
        public EntityCollection<FPTemplateRow> FPTemplateRows
        {
            get
            {
                if ((this._fpTemplateRows == null))
                {
                    this._fpTemplateRows = new EntityCollection<FPTemplateRow>(this, "FPTemplateRows", this.FilterFPTemplateRows, this.AttachFPTemplateRows, this.DetachFPTemplateRows);
                }
                return this._fpTemplateRows;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        private bool FilterCoverage(Coverage entity)
        {
            return (entity.ID == this.CoverageID);
        }
        
        private bool FilterFixedPattern(FixedPattern entity)
        {
            return (entity.ID == this.FixedPatternID);
        }
        
        private void AttachFPTemplateRows(FPTemplateRow entity)
        {
            entity.FixedPatternTemplate = this;
        }
        
        private void DetachFPTemplateRows(FPTemplateRow entity)
        {
            entity.FixedPatternTemplate = null;
        }
        
        private bool FilterFPTemplateRows(FPTemplateRow entity)
        {
            return (entity.FixedPatternTemplateID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Foundry' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Foundry : Entity
    {
        
        private string _address;
        
        private EntityCollection<Customer> _customers;
        
        private string _foundryName;
        
        private int _id;
        
        private string _reportNumberPrefix;
        
        private string _reportTemplate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnFoundryNameChanging(string value);
        partial void OnFoundryNameChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnReportNumberPrefixChanging(string value);
        partial void OnReportNumberPrefixChanged();
        partial void OnReportTemplateChanging(string value);
        partial void OnReportTemplateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Foundry"/> class.
        /// </summary>
        public Foundry()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Customer"/> entity instances.
        /// </summary>
        [Association("Foundry_Customer", "ID", "FoundryID")]
        public EntityCollection<Customer> Customers
        {
            get
            {
                if ((this._customers == null))
                {
                    this._customers = new EntityCollection<Customer>(this, "Customers", this.FilterCustomers, this.AttachCustomers, this.DetachCustomers);
                }
                return this._customers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FoundryName' value.
        /// </summary>
        [DataMember()]
        public string FoundryName
        {
            get
            {
                return this._foundryName;
            }
            set
            {
                if ((this._foundryName != value))
                {
                    this.OnFoundryNameChanging(value);
                    this.RaiseDataMemberChanging("FoundryName");
                    this.ValidateProperty("FoundryName", value);
                    this._foundryName = value;
                    this.RaiseDataMemberChanged("FoundryName");
                    this.OnFoundryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportNumberPrefix' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ReportNumberPrefix
        {
            get
            {
                return this._reportNumberPrefix;
            }
            set
            {
                if ((this._reportNumberPrefix != value))
                {
                    this.OnReportNumberPrefixChanging(value);
                    this.RaiseDataMemberChanging("ReportNumberPrefix");
                    this.ValidateProperty("ReportNumberPrefix", value);
                    this._reportNumberPrefix = value;
                    this.RaiseDataMemberChanged("ReportNumberPrefix");
                    this.OnReportNumberPrefixChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportTemplate' value.
        /// </summary>
        [DataMember()]
        public string ReportTemplate
        {
            get
            {
                return this._reportTemplate;
            }
            set
            {
                if ((this._reportTemplate != value))
                {
                    this.OnReportTemplateChanging(value);
                    this.RaiseDataMemberChanging("ReportTemplate");
                    this.ValidateProperty("ReportTemplate", value);
                    this._reportTemplate = value;
                    this.RaiseDataMemberChanged("ReportTemplate");
                    this.OnReportTemplateChanged();
                }
            }
        }
        
        private void AttachCustomers(Customer entity)
        {
            entity.Foundry = this;
        }
        
        private void DetachCustomers(Customer entity)
        {
            entity.Foundry = null;
        }
        
        private bool FilterCustomers(Customer entity)
        {
            return (entity.FoundryID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'FPTemplateRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class FPTemplateRow : Entity
    {
        
        private string _density;
        
        private string _designation;
        
        private EntityRef<FilmSize> _filmSize;
        
        private int _filmSizeID;
        
        private string _filmSizeString;
        
        private EntityRef<FixedPatternTemplate> _fixedPatternTemplate;
        
        private int _fixedPatternTemplateID;
        
        private int _id;
        
        private string _location;
        
        private string _segment;
        
        private string _sensitivity;
        
        private int _sfd;
        
        private int _slNo;
        
        private int _thickness;
        
        private string _thicknessRange;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDensityChanging(string value);
        partial void OnDensityChanged();
        partial void OnDesignationChanging(string value);
        partial void OnDesignationChanged();
        partial void OnFilmSizeIDChanging(int value);
        partial void OnFilmSizeIDChanged();
        partial void OnFilmSizeStringChanging(string value);
        partial void OnFilmSizeStringChanged();
        partial void OnFixedPatternTemplateIDChanging(int value);
        partial void OnFixedPatternTemplateIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnSegmentChanging(string value);
        partial void OnSegmentChanged();
        partial void OnSensitivityChanging(string value);
        partial void OnSensitivityChanged();
        partial void OnSFDChanging(int value);
        partial void OnSFDChanged();
        partial void OnSlNoChanging(int value);
        partial void OnSlNoChanged();
        partial void OnThicknessChanging(int value);
        partial void OnThicknessChanged();
        partial void OnThicknessRangeChanging(string value);
        partial void OnThicknessRangeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FPTemplateRow"/> class.
        /// </summary>
        public FPTemplateRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Density' value.
        /// </summary>
        [DataMember()]
        public string Density
        {
            get
            {
                return this._density;
            }
            set
            {
                if ((this._density != value))
                {
                    this.OnDensityChanging(value);
                    this.RaiseDataMemberChanging("Density");
                    this.ValidateProperty("Density", value);
                    this._density = value;
                    this.RaiseDataMemberChanged("Density");
                    this.OnDensityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Designation' value.
        /// </summary>
        [DataMember()]
        public string Designation
        {
            get
            {
                return this._designation;
            }
            set
            {
                if ((this._designation != value))
                {
                    this.OnDesignationChanging(value);
                    this.RaiseDataMemberChanging("Designation");
                    this.ValidateProperty("Designation", value);
                    this._designation = value;
                    this.RaiseDataMemberChanged("Designation");
                    this.OnDesignationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FilmSize"/> entity.
        /// </summary>
        [Association("FilmSize_FPTemplateRow", "FilmSizeID", "ID", IsForeignKey=true)]
        public FilmSize FilmSize
        {
            get
            {
                if ((this._filmSize == null))
                {
                    this._filmSize = new EntityRef<FilmSize>(this, "FilmSize", this.FilterFilmSize);
                }
                return this._filmSize.Entity;
            }
            set
            {
                FilmSize previous = this.FilmSize;
                if ((previous != value))
                {
                    this.ValidateProperty("FilmSize", value);
                    if ((value != null))
                    {
                        this.FilmSizeID = value.ID;
                    }
                    else
                    {
                        this.FilmSizeID = default(int);
                    }
                    this._filmSize.Entity = value;
                    this.RaisePropertyChanged("FilmSize");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FilmSizeID
        {
            get
            {
                return this._filmSizeID;
            }
            set
            {
                if ((this._filmSizeID != value))
                {
                    this.OnFilmSizeIDChanging(value);
                    this.RaiseDataMemberChanging("FilmSizeID");
                    this.ValidateProperty("FilmSizeID", value);
                    this._filmSizeID = value;
                    this.RaiseDataMemberChanged("FilmSizeID");
                    this.OnFilmSizeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeString' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string FilmSizeString
        {
            get
            {
                return this._filmSizeString;
            }
            set
            {
                if ((this._filmSizeString != value))
                {
                    this.OnFilmSizeStringChanging(value);
                    this.RaiseDataMemberChanging("FilmSizeString");
                    this.ValidateProperty("FilmSizeString", value);
                    this._filmSizeString = value;
                    this.RaiseDataMemberChanged("FilmSizeString");
                    this.OnFilmSizeStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FixedPatternTemplate"/> entity.
        /// </summary>
        [Association("FixedPatternTemplate_FPTemplateRow", "FixedPatternTemplateID", "ID", IsForeignKey=true)]
        public FixedPatternTemplate FixedPatternTemplate
        {
            get
            {
                if ((this._fixedPatternTemplate == null))
                {
                    this._fixedPatternTemplate = new EntityRef<FixedPatternTemplate>(this, "FixedPatternTemplate", this.FilterFixedPatternTemplate);
                }
                return this._fixedPatternTemplate.Entity;
            }
            set
            {
                FixedPatternTemplate previous = this.FixedPatternTemplate;
                if ((previous != value))
                {
                    this.ValidateProperty("FixedPatternTemplate", value);
                    if ((previous != null))
                    {
                        this._fixedPatternTemplate.Entity = null;
                        previous.FPTemplateRows.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FixedPatternTemplateID = value.ID;
                    }
                    else
                    {
                        this.FixedPatternTemplateID = default(int);
                    }
                    this._fixedPatternTemplate.Entity = value;
                    if ((value != null))
                    {
                        value.FPTemplateRows.Add(this);
                    }
                    this.RaisePropertyChanged("FixedPatternTemplate");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FixedPatternTemplateID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FixedPatternTemplateID
        {
            get
            {
                return this._fixedPatternTemplateID;
            }
            set
            {
                if ((this._fixedPatternTemplateID != value))
                {
                    this.OnFixedPatternTemplateIDChanging(value);
                    this.RaiseDataMemberChanging("FixedPatternTemplateID");
                    this.ValidateProperty("FixedPatternTemplateID", value);
                    this._fixedPatternTemplateID = value;
                    this.RaiseDataMemberChanged("FixedPatternTemplateID");
                    this.OnFixedPatternTemplateIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Segment' value.
        /// </summary>
        [DataMember()]
        public string Segment
        {
            get
            {
                return this._segment;
            }
            set
            {
                if ((this._segment != value))
                {
                    this.OnSegmentChanging(value);
                    this.RaiseDataMemberChanging("Segment");
                    this.ValidateProperty("Segment", value);
                    this._segment = value;
                    this.RaiseDataMemberChanged("Segment");
                    this.OnSegmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sensitivity' value.
        /// </summary>
        [DataMember()]
        public string Sensitivity
        {
            get
            {
                return this._sensitivity;
            }
            set
            {
                if ((this._sensitivity != value))
                {
                    this.OnSensitivityChanging(value);
                    this.RaiseDataMemberChanging("Sensitivity");
                    this.ValidateProperty("Sensitivity", value);
                    this._sensitivity = value;
                    this.RaiseDataMemberChanged("Sensitivity");
                    this.OnSensitivityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SFD' value.
        /// </summary>
        [DataMember()]
        public int SFD
        {
            get
            {
                return this._sfd;
            }
            set
            {
                if ((this._sfd != value))
                {
                    this.OnSFDChanging(value);
                    this.RaiseDataMemberChanging("SFD");
                    this.ValidateProperty("SFD", value);
                    this._sfd = value;
                    this.RaiseDataMemberChanged("SFD");
                    this.OnSFDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlNo' value.
        /// </summary>
        [DataMember()]
        public int SlNo
        {
            get
            {
                return this._slNo;
            }
            set
            {
                if ((this._slNo != value))
                {
                    this.OnSlNoChanging(value);
                    this.RaiseDataMemberChanging("SlNo");
                    this.ValidateProperty("SlNo", value);
                    this._slNo = value;
                    this.RaiseDataMemberChanged("SlNo");
                    this.OnSlNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Thickness' value.
        /// </summary>
        [DataMember()]
        public int Thickness
        {
            get
            {
                return this._thickness;
            }
            set
            {
                if ((this._thickness != value))
                {
                    this.OnThicknessChanging(value);
                    this.RaiseDataMemberChanging("Thickness");
                    this.ValidateProperty("Thickness", value);
                    this._thickness = value;
                    this.RaiseDataMemberChanged("Thickness");
                    this.OnThicknessChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThicknessRange' value.
        /// </summary>
        [DataMember()]
        public string ThicknessRange
        {
            get
            {
                return this._thicknessRange;
            }
            set
            {
                if ((this._thicknessRange != value))
                {
                    this.OnThicknessRangeChanging(value);
                    this.RaiseDataMemberChanging("ThicknessRange");
                    this.ValidateProperty("ThicknessRange", value);
                    this._thicknessRange = value;
                    this.RaiseDataMemberChanged("ThicknessRange");
                    this.OnThicknessRangeChanged();
                }
            }
        }
        
        private bool FilterFilmSize(FilmSize entity)
        {
            return (entity.ID == this.FilmSizeID);
        }
        
        private bool FilterFixedPatternTemplate(FixedPatternTemplate entity)
        {
            return (entity.ID == this.FixedPatternTemplateID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'LocationClass' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class LocationClass : Entity
    {
        
        private Guid _fixedPatternPerformanceRowID;
        
        private Guid _id;
        
        private string _location;
        
        private EntityCollection<SegmentClass> _segments;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFixedPatternPerformanceRowIDChanging(Guid value);
        partial void OnFixedPatternPerformanceRowIDChanged();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationClass"/> class.
        /// </summary>
        public LocationClass()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FixedPatternPerformanceRowID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public Guid FixedPatternPerformanceRowID
        {
            get
            {
                return this._fixedPatternPerformanceRowID;
            }
            set
            {
                if ((this._fixedPatternPerformanceRowID != value))
                {
                    this.OnFixedPatternPerformanceRowIDChanging(value);
                    this.RaiseDataMemberChanging("FixedPatternPerformanceRowID");
                    this.ValidateProperty("FixedPatternPerformanceRowID", value);
                    this._fixedPatternPerformanceRowID = value;
                    this.RaiseDataMemberChanged("FixedPatternPerformanceRowID");
                    this.OnFixedPatternPerformanceRowIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SegmentClass"/> entity instances.
        /// </summary>
        [Association("SegmentClass", "ID", "LocationID")]
        public EntityCollection<SegmentClass> Segments
        {
            get
            {
                if ((this._segments == null))
                {
                    this._segments = new EntityCollection<SegmentClass>(this, "Segments", this.FilterSegments);
                }
                return this._segments;
            }
        }
        
        private bool FilterSegments(SegmentClass entity)
        {
            return (entity.LocationID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Remark' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Remark : Entity
    {
        
        private int _id;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Remark"/> class.
        /// </summary>
        public Remark()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RGReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class RGReport : Entity
    {
        
        private string _acceptanceAsPer;
        
        private bool _canDelete;
        
        private EntityRef<Coverage> _coverage;
        
        private int _coverageID;
        
        private DateTime _dateOfTest;
        
        private string _drawingNo;
        
        private string _endCustomerName;
        
        private string _evaluationAsPer;
        
        private string _film;
        
        private bool _first;
        
        private EntityRef<FixedPattern> _fixedPattern;
        
        private int _fixedPatternID;
        
        private string _heatNo;
        
        private int _id;
        
        private string _leadScreen;
        
        private string _procedureRef;
        
        private DateTime _reportDate;
        
        private string _reportNo;
        
        private string _reportType;
        
        private string _reportTypeAndNo;
        
        private int _reshootNo;
        
        private string _result;
        
        private EntityCollection<RGReportRow> _rgReportRows;
        
        private bool _rowsDeleted;
        
        private string _rtNo;
        
        private EntityRef<Shift> _shift;
        
        private Nullable<int> _shiftID;
        
        private string _sourceSize;
        
        private string _specifications;
        
        private EntityRef<RGStatus> _status;
        
        private int _statusID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcceptanceAsPerChanging(string value);
        partial void OnAcceptanceAsPerChanged();
        partial void OnCanDeleteChanging(bool value);
        partial void OnCanDeleteChanged();
        partial void OnCoverageIDChanging(int value);
        partial void OnCoverageIDChanged();
        partial void OnDateOfTestChanging(DateTime value);
        partial void OnDateOfTestChanged();
        partial void OnDrawingNoChanging(string value);
        partial void OnDrawingNoChanged();
        partial void OnEndCustomerNameChanging(string value);
        partial void OnEndCustomerNameChanged();
        partial void OnEvaluationAsPerChanging(string value);
        partial void OnEvaluationAsPerChanged();
        partial void OnFilmChanging(string value);
        partial void OnFilmChanged();
        partial void OnFirstChanging(bool value);
        partial void OnFirstChanged();
        partial void OnFixedPatternIDChanging(int value);
        partial void OnFixedPatternIDChanged();
        partial void OnHeatNoChanging(string value);
        partial void OnHeatNoChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLeadScreenChanging(string value);
        partial void OnLeadScreenChanged();
        partial void OnProcedureRefChanging(string value);
        partial void OnProcedureRefChanged();
        partial void OnReportDateChanging(DateTime value);
        partial void OnReportDateChanged();
        partial void OnReportNoChanging(string value);
        partial void OnReportNoChanged();
        partial void OnReportTypeChanging(string value);
        partial void OnReportTypeChanged();
        partial void OnReportTypeAndNoChanging(string value);
        partial void OnReportTypeAndNoChanged();
        partial void OnReshootNoChanging(int value);
        partial void OnReshootNoChanged();
        partial void OnResultChanging(string value);
        partial void OnResultChanged();
        partial void OnRowsDeletedChanging(bool value);
        partial void OnRowsDeletedChanged();
        partial void OnRTNoChanging(string value);
        partial void OnRTNoChanged();
        partial void OnShiftIDChanging(Nullable<int> value);
        partial void OnShiftIDChanged();
        partial void OnSourceSizeChanging(string value);
        partial void OnSourceSizeChanged();
        partial void OnSpecificationsChanging(string value);
        partial void OnSpecificationsChanged();
        partial void OnStatusIDChanging(int value);
        partial void OnStatusIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RGReport"/> class.
        /// </summary>
        public RGReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcceptanceAsPer' value.
        /// </summary>
        [DataMember()]
        public string AcceptanceAsPer
        {
            get
            {
                return this._acceptanceAsPer;
            }
            set
            {
                if ((this._acceptanceAsPer != value))
                {
                    this.OnAcceptanceAsPerChanging(value);
                    this.RaiseDataMemberChanging("AcceptanceAsPer");
                    this.ValidateProperty("AcceptanceAsPer", value);
                    this._acceptanceAsPer = value;
                    this.RaiseDataMemberChanged("AcceptanceAsPer");
                    this.OnAcceptanceAsPerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CanDelete' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool CanDelete
        {
            get
            {
                return this._canDelete;
            }
            set
            {
                if ((this._canDelete != value))
                {
                    this.OnCanDeleteChanging(value);
                    this.ValidateProperty("CanDelete", value);
                    this._canDelete = value;
                    this.RaisePropertyChanged("CanDelete");
                    this.OnCanDeleteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Coverage"/> entity.
        /// </summary>
        [Association("Coverage_RGReport", "CoverageID", "ID", IsForeignKey=true)]
        public Coverage Coverage
        {
            get
            {
                if ((this._coverage == null))
                {
                    this._coverage = new EntityRef<Coverage>(this, "Coverage", this.FilterCoverage);
                }
                return this._coverage.Entity;
            }
            set
            {
                Coverage previous = this.Coverage;
                if ((previous != value))
                {
                    this.ValidateProperty("Coverage", value);
                    if ((value != null))
                    {
                        this.CoverageID = value.ID;
                    }
                    else
                    {
                        this.CoverageID = default(int);
                    }
                    this._coverage.Entity = value;
                    this.RaisePropertyChanged("Coverage");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CoverageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CoverageID
        {
            get
            {
                return this._coverageID;
            }
            set
            {
                if ((this._coverageID != value))
                {
                    this.OnCoverageIDChanging(value);
                    this.RaiseDataMemberChanging("CoverageID");
                    this.ValidateProperty("CoverageID", value);
                    this._coverageID = value;
                    this.RaiseDataMemberChanged("CoverageID");
                    this.OnCoverageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfTest' value.
        /// </summary>
        [DataMember()]
        public DateTime DateOfTest
        {
            get
            {
                return this._dateOfTest;
            }
            set
            {
                if ((this._dateOfTest != value))
                {
                    this.OnDateOfTestChanging(value);
                    this.RaiseDataMemberChanging("DateOfTest");
                    this.ValidateProperty("DateOfTest", value);
                    this._dateOfTest = value;
                    this.RaiseDataMemberChanged("DateOfTest");
                    this.OnDateOfTestChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DrawingNo' value.
        /// </summary>
        [DataMember()]
        public string DrawingNo
        {
            get
            {
                return this._drawingNo;
            }
            set
            {
                if ((this._drawingNo != value))
                {
                    this.OnDrawingNoChanging(value);
                    this.RaiseDataMemberChanging("DrawingNo");
                    this.ValidateProperty("DrawingNo", value);
                    this._drawingNo = value;
                    this.RaiseDataMemberChanged("DrawingNo");
                    this.OnDrawingNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndCustomerName' value.
        /// </summary>
        [DataMember()]
        public string EndCustomerName
        {
            get
            {
                return this._endCustomerName;
            }
            set
            {
                if ((this._endCustomerName != value))
                {
                    this.OnEndCustomerNameChanging(value);
                    this.RaiseDataMemberChanging("EndCustomerName");
                    this.ValidateProperty("EndCustomerName", value);
                    this._endCustomerName = value;
                    this.RaiseDataMemberChanged("EndCustomerName");
                    this.OnEndCustomerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EvaluationAsPer' value.
        /// </summary>
        [DataMember()]
        public string EvaluationAsPer
        {
            get
            {
                return this._evaluationAsPer;
            }
            set
            {
                if ((this._evaluationAsPer != value))
                {
                    this.OnEvaluationAsPerChanging(value);
                    this.RaiseDataMemberChanging("EvaluationAsPer");
                    this.ValidateProperty("EvaluationAsPer", value);
                    this._evaluationAsPer = value;
                    this.RaiseDataMemberChanged("EvaluationAsPer");
                    this.OnEvaluationAsPerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Film' value.
        /// </summary>
        [DataMember()]
        public string Film
        {
            get
            {
                return this._film;
            }
            set
            {
                if ((this._film != value))
                {
                    this.OnFilmChanging(value);
                    this.RaiseDataMemberChanging("Film");
                    this.ValidateProperty("Film", value);
                    this._film = value;
                    this.RaiseDataMemberChanged("Film");
                    this.OnFilmChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'First' value.
        /// </summary>
        [DataMember()]
        public bool First
        {
            get
            {
                return this._first;
            }
            set
            {
                if ((this._first != value))
                {
                    this.OnFirstChanging(value);
                    this.RaiseDataMemberChanging("First");
                    this.ValidateProperty("First", value);
                    this._first = value;
                    this.RaiseDataMemberChanged("First");
                    this.OnFirstChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FixedPattern"/> entity.
        /// </summary>
        [Association("FixedPattern_RGReport", "FixedPatternID", "ID", IsForeignKey=true)]
        public FixedPattern FixedPattern
        {
            get
            {
                if ((this._fixedPattern == null))
                {
                    this._fixedPattern = new EntityRef<FixedPattern>(this, "FixedPattern", this.FilterFixedPattern);
                }
                return this._fixedPattern.Entity;
            }
            set
            {
                FixedPattern previous = this.FixedPattern;
                if ((previous != value))
                {
                    this.ValidateProperty("FixedPattern", value);
                    if ((value != null))
                    {
                        this.FixedPatternID = value.ID;
                    }
                    else
                    {
                        this.FixedPatternID = default(int);
                    }
                    this._fixedPattern.Entity = value;
                    this.RaisePropertyChanged("FixedPattern");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FixedPatternID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FixedPatternID
        {
            get
            {
                return this._fixedPatternID;
            }
            set
            {
                if ((this._fixedPatternID != value))
                {
                    this.OnFixedPatternIDChanging(value);
                    this.RaiseDataMemberChanging("FixedPatternID");
                    this.ValidateProperty("FixedPatternID", value);
                    this._fixedPatternID = value;
                    this.RaiseDataMemberChanged("FixedPatternID");
                    this.OnFixedPatternIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HeatNo' value.
        /// </summary>
        [DataMember()]
        public string HeatNo
        {
            get
            {
                return this._heatNo;
            }
            set
            {
                if ((this._heatNo != value))
                {
                    this.OnHeatNoChanging(value);
                    this.RaiseDataMemberChanging("HeatNo");
                    this.ValidateProperty("HeatNo", value);
                    this._heatNo = value;
                    this.RaiseDataMemberChanged("HeatNo");
                    this.OnHeatNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeadScreen' value.
        /// </summary>
        [DataMember()]
        public string LeadScreen
        {
            get
            {
                return this._leadScreen;
            }
            set
            {
                if ((this._leadScreen != value))
                {
                    this.OnLeadScreenChanging(value);
                    this.RaiseDataMemberChanging("LeadScreen");
                    this.ValidateProperty("LeadScreen", value);
                    this._leadScreen = value;
                    this.RaiseDataMemberChanged("LeadScreen");
                    this.OnLeadScreenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProcedureRef' value.
        /// </summary>
        [DataMember()]
        public string ProcedureRef
        {
            get
            {
                return this._procedureRef;
            }
            set
            {
                if ((this._procedureRef != value))
                {
                    this.OnProcedureRefChanging(value);
                    this.RaiseDataMemberChanging("ProcedureRef");
                    this.ValidateProperty("ProcedureRef", value);
                    this._procedureRef = value;
                    this.RaiseDataMemberChanged("ProcedureRef");
                    this.OnProcedureRefChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ReportDate
        {
            get
            {
                return this._reportDate;
            }
            set
            {
                if ((this._reportDate != value))
                {
                    this.OnReportDateChanging(value);
                    this.RaiseDataMemberChanging("ReportDate");
                    this.ValidateProperty("ReportDate", value);
                    this._reportDate = value;
                    this.RaiseDataMemberChanged("ReportDate");
                    this.OnReportDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportNo' value.
        /// </summary>
        [DataMember()]
        public string ReportNo
        {
            get
            {
                return this._reportNo;
            }
            set
            {
                if ((this._reportNo != value))
                {
                    this.OnReportNoChanging(value);
                    this.RaiseDataMemberChanging("ReportNo");
                    this.ValidateProperty("ReportNo", value);
                    this._reportNo = value;
                    this.RaiseDataMemberChanged("ReportNo");
                    this.OnReportNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportType' value.
        /// </summary>
        [DataMember()]
        public string ReportType
        {
            get
            {
                return this._reportType;
            }
            set
            {
                if ((this._reportType != value))
                {
                    this.OnReportTypeChanging(value);
                    this.RaiseDataMemberChanging("ReportType");
                    this.ValidateProperty("ReportType", value);
                    this._reportType = value;
                    this.RaiseDataMemberChanged("ReportType");
                    this.OnReportTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportTypeAndNo' value.
        /// </summary>
        [DataMember()]
        public string ReportTypeAndNo
        {
            get
            {
                return this._reportTypeAndNo;
            }
            set
            {
                if ((this._reportTypeAndNo != value))
                {
                    this.OnReportTypeAndNoChanging(value);
                    this.RaiseDataMemberChanging("ReportTypeAndNo");
                    this.ValidateProperty("ReportTypeAndNo", value);
                    this._reportTypeAndNo = value;
                    this.RaiseDataMemberChanged("ReportTypeAndNo");
                    this.OnReportTypeAndNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReshootNo' value.
        /// </summary>
        [DataMember()]
        public int ReshootNo
        {
            get
            {
                return this._reshootNo;
            }
            set
            {
                if ((this._reshootNo != value))
                {
                    this.OnReshootNoChanging(value);
                    this.RaiseDataMemberChanging("ReshootNo");
                    this.ValidateProperty("ReshootNo", value);
                    this._reshootNo = value;
                    this.RaiseDataMemberChanged("ReshootNo");
                    this.OnReshootNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Result' value.
        /// </summary>
        [DataMember()]
        public string Result
        {
            get
            {
                return this._result;
            }
            set
            {
                if ((this._result != value))
                {
                    this.OnResultChanging(value);
                    this.RaiseDataMemberChanging("Result");
                    this.ValidateProperty("Result", value);
                    this._result = value;
                    this.RaiseDataMemberChanged("Result");
                    this.OnResultChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RGReportRow"/> entity instances.
        /// </summary>
        [Association("RGReport_RGReportRow", "ID", "RGReportID")]
        public EntityCollection<RGReportRow> RGReportRows
        {
            get
            {
                if ((this._rgReportRows == null))
                {
                    this._rgReportRows = new EntityCollection<RGReportRow>(this, "RGReportRows", this.FilterRGReportRows, this.AttachRGReportRows, this.DetachRGReportRows);
                }
                return this._rgReportRows;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowsDeleted' value.
        /// </summary>
        [DataMember()]
        public bool RowsDeleted
        {
            get
            {
                return this._rowsDeleted;
            }
            set
            {
                if ((this._rowsDeleted != value))
                {
                    this.OnRowsDeletedChanging(value);
                    this.RaiseDataMemberChanging("RowsDeleted");
                    this.ValidateProperty("RowsDeleted", value);
                    this._rowsDeleted = value;
                    this.RaiseDataMemberChanged("RowsDeleted");
                    this.OnRowsDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RTNo' value.
        /// </summary>
        [DataMember()]
        public string RTNo
        {
            get
            {
                return this._rtNo;
            }
            set
            {
                if ((this._rtNo != value))
                {
                    this.OnRTNoChanging(value);
                    this.RaiseDataMemberChanging("RTNo");
                    this.ValidateProperty("RTNo", value);
                    this._rtNo = value;
                    this.RaiseDataMemberChanged("RTNo");
                    this.OnRTNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Shift"/> entity.
        /// </summary>
        [Association("Shift_RGReport", "ShiftID", "ID", IsForeignKey=true)]
        public Shift Shift
        {
            get
            {
                if ((this._shift == null))
                {
                    this._shift = new EntityRef<Shift>(this, "Shift", this.FilterShift);
                }
                return this._shift.Entity;
            }
            set
            {
                Shift previous = this.Shift;
                if ((previous != value))
                {
                    this.ValidateProperty("Shift", value);
                    if ((value != null))
                    {
                        this.ShiftID = value.ID;
                    }
                    else
                    {
                        this.ShiftID = default(Nullable<int>);
                    }
                    this._shift.Entity = value;
                    this.RaisePropertyChanged("Shift");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShiftID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ShiftID
        {
            get
            {
                return this._shiftID;
            }
            set
            {
                if ((this._shiftID != value))
                {
                    this.OnShiftIDChanging(value);
                    this.RaiseDataMemberChanging("ShiftID");
                    this.ValidateProperty("ShiftID", value);
                    this._shiftID = value;
                    this.RaiseDataMemberChanged("ShiftID");
                    this.OnShiftIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SourceSize' value.
        /// </summary>
        [DataMember()]
        public string SourceSize
        {
            get
            {
                return this._sourceSize;
            }
            set
            {
                if ((this._sourceSize != value))
                {
                    this.OnSourceSizeChanging(value);
                    this.RaiseDataMemberChanging("SourceSize");
                    this.ValidateProperty("SourceSize", value);
                    this._sourceSize = value;
                    this.RaiseDataMemberChanged("SourceSize");
                    this.OnSourceSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Specifications' value.
        /// </summary>
        [DataMember()]
        public string Specifications
        {
            get
            {
                return this._specifications;
            }
            set
            {
                if ((this._specifications != value))
                {
                    this.OnSpecificationsChanging(value);
                    this.RaiseDataMemberChanging("Specifications");
                    this.ValidateProperty("Specifications", value);
                    this._specifications = value;
                    this.RaiseDataMemberChanged("Specifications");
                    this.OnSpecificationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RGStatus"/> entity.
        /// </summary>
        [Association("RGStatus_RGReport", "StatusID", "ID", IsForeignKey=true)]
        public RGStatus Status
        {
            get
            {
                if ((this._status == null))
                {
                    this._status = new EntityRef<RGStatus>(this, "Status", this.FilterStatus);
                }
                return this._status.Entity;
            }
            set
            {
                RGStatus previous = this.Status;
                if ((previous != value))
                {
                    this.ValidateProperty("Status", value);
                    if ((value != null))
                    {
                        this.StatusID = value.ID;
                    }
                    else
                    {
                        this.StatusID = default(int);
                    }
                    this._status.Entity = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int StatusID
        {
            get
            {
                return this._statusID;
            }
            set
            {
                if ((this._statusID != value))
                {
                    this.OnStatusIDChanging(value);
                    this.RaiseDataMemberChanging("StatusID");
                    this.ValidateProperty("StatusID", value);
                    this._statusID = value;
                    this.RaiseDataMemberChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }
        
        private bool FilterCoverage(Coverage entity)
        {
            return (entity.ID == this.CoverageID);
        }
        
        private bool FilterFixedPattern(FixedPattern entity)
        {
            return (entity.ID == this.FixedPatternID);
        }
        
        private void AttachRGReportRows(RGReportRow entity)
        {
            entity.RGReport = this;
        }
        
        private void DetachRGReportRows(RGReportRow entity)
        {
            entity.RGReport = null;
        }
        
        private bool FilterRGReportRows(RGReportRow entity)
        {
            return (entity.RGReportID == this.ID);
        }
        
        private bool FilterShift(Shift entity)
        {
            return (entity.ID == this.ShiftID);
        }
        
        private bool FilterStatus(RGStatus entity)
        {
            return (entity.ID == this.StatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RGReportRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class RGReportRow : Entity
    {
        
        private string _density;
        
        private string _designation;
        
        private EntityRef<Energy> _energy;
        
        private int _energyID;
        
        private string _energyText;
        
        private int _filmCount;
        
        private EntityRef<FilmSize> _filmSize;
        
        private int _filmSizeID;
        
        private string _filmSizeString;
        
        private string _filmSizeWithCount;
        
        private Nullable<int> _fpslNo;
        
        private int _id;
        
        private string _location;
        
        private string _observations;
        
        private EntityRef<Remark> _remark;
        
        private Nullable<int> _remarkID;
        
        private string _remarkText;
        
        private EntityRef<RGReport> _rgReport;
        
        private int _rgReportID;
        
        private EntityRef<RGReportRowType> _rowType;
        
        private int _rowTypeID;
        
        private string _segment;
        
        private string _sensitivity;
        
        private int _sfd;
        
        private int _slNo;
        
        private EntityRef<Technician> _technician;
        
        private Nullable<int> _technicianID;
        
        private string _technicianText;
        
        private string _technique;
        
        private int _thickness;
        
        private string _thicknessRange;
        
        private EntityRef<Welder> _welder;
        
        private Nullable<int> _welderID;
        
        private string _welderText;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDensityChanging(string value);
        partial void OnDensityChanged();
        partial void OnDesignationChanging(string value);
        partial void OnDesignationChanged();
        partial void OnEnergyIDChanging(int value);
        partial void OnEnergyIDChanged();
        partial void OnEnergyTextChanging(string value);
        partial void OnEnergyTextChanged();
        partial void OnFilmCountChanging(int value);
        partial void OnFilmCountChanged();
        partial void OnFilmSizeIDChanging(int value);
        partial void OnFilmSizeIDChanged();
        partial void OnFilmSizeStringChanging(string value);
        partial void OnFilmSizeStringChanged();
        partial void OnFilmSizeWithCountChanging(string value);
        partial void OnFilmSizeWithCountChanged();
        partial void OnFPSLNoChanging(Nullable<int> value);
        partial void OnFPSLNoChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnObservationsChanging(string value);
        partial void OnObservationsChanged();
        partial void OnRemarkIDChanging(Nullable<int> value);
        partial void OnRemarkIDChanged();
        partial void OnRemarkTextChanging(string value);
        partial void OnRemarkTextChanged();
        partial void OnRGReportIDChanging(int value);
        partial void OnRGReportIDChanged();
        partial void OnRowTypeIDChanging(int value);
        partial void OnRowTypeIDChanged();
        partial void OnSegmentChanging(string value);
        partial void OnSegmentChanged();
        partial void OnSensitivityChanging(string value);
        partial void OnSensitivityChanged();
        partial void OnSFDChanging(int value);
        partial void OnSFDChanged();
        partial void OnSlNoChanging(int value);
        partial void OnSlNoChanged();
        partial void OnTechnicianIDChanging(Nullable<int> value);
        partial void OnTechnicianIDChanged();
        partial void OnTechnicianTextChanging(string value);
        partial void OnTechnicianTextChanged();
        partial void OnTechniqueChanging(string value);
        partial void OnTechniqueChanged();
        partial void OnThicknessChanging(int value);
        partial void OnThicknessChanged();
        partial void OnThicknessRangeChanging(string value);
        partial void OnThicknessRangeChanged();
        partial void OnWelderIDChanging(Nullable<int> value);
        partial void OnWelderIDChanged();
        partial void OnWelderTextChanging(string value);
        partial void OnWelderTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RGReportRow"/> class.
        /// </summary>
        public RGReportRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Density' value.
        /// </summary>
        [DataMember()]
        public string Density
        {
            get
            {
                return this._density;
            }
            set
            {
                if ((this._density != value))
                {
                    this.OnDensityChanging(value);
                    this.RaiseDataMemberChanging("Density");
                    this.ValidateProperty("Density", value);
                    this._density = value;
                    this.RaiseDataMemberChanged("Density");
                    this.OnDensityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Designation' value.
        /// </summary>
        [DataMember()]
        public string Designation
        {
            get
            {
                return this._designation;
            }
            set
            {
                if ((this._designation != value))
                {
                    this.OnDesignationChanging(value);
                    this.RaiseDataMemberChanging("Designation");
                    this.ValidateProperty("Designation", value);
                    this._designation = value;
                    this.RaiseDataMemberChanged("Designation");
                    this.OnDesignationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Energy"/> entity.
        /// </summary>
        [Association("Energy_RGReportRow", "EnergyID", "ID", IsForeignKey=true)]
        public Energy Energy
        {
            get
            {
                if ((this._energy == null))
                {
                    this._energy = new EntityRef<Energy>(this, "Energy", this.FilterEnergy);
                }
                return this._energy.Entity;
            }
            set
            {
                Energy previous = this.Energy;
                if ((previous != value))
                {
                    this.ValidateProperty("Energy", value);
                    if ((value != null))
                    {
                        this.EnergyID = value.ID;
                    }
                    else
                    {
                        this.EnergyID = default(int);
                    }
                    this._energy.Entity = value;
                    this.RaisePropertyChanged("Energy");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnergyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int EnergyID
        {
            get
            {
                return this._energyID;
            }
            set
            {
                if ((this._energyID != value))
                {
                    this.OnEnergyIDChanging(value);
                    this.RaiseDataMemberChanging("EnergyID");
                    this.ValidateProperty("EnergyID", value);
                    this._energyID = value;
                    this.RaiseDataMemberChanged("EnergyID");
                    this.OnEnergyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnergyText' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string EnergyText
        {
            get
            {
                return this._energyText;
            }
            set
            {
                if ((this._energyText != value))
                {
                    this.OnEnergyTextChanging(value);
                    this.RaiseDataMemberChanging("EnergyText");
                    this.ValidateProperty("EnergyText", value);
                    this._energyText = value;
                    this.RaiseDataMemberChanged("EnergyText");
                    this.OnEnergyTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmCount' value.
        /// </summary>
        [DataMember()]
        public int FilmCount
        {
            get
            {
                return this._filmCount;
            }
            set
            {
                if ((this._filmCount != value))
                {
                    this.OnFilmCountChanging(value);
                    this.RaiseDataMemberChanging("FilmCount");
                    this.ValidateProperty("FilmCount", value);
                    this._filmCount = value;
                    this.RaiseDataMemberChanged("FilmCount");
                    this.OnFilmCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="FilmSize"/> entity.
        /// </summary>
        [Association("FilmSize_RGReportRow", "FilmSizeID", "ID", IsForeignKey=true)]
        public FilmSize FilmSize
        {
            get
            {
                if ((this._filmSize == null))
                {
                    this._filmSize = new EntityRef<FilmSize>(this, "FilmSize", this.FilterFilmSize);
                }
                return this._filmSize.Entity;
            }
            set
            {
                FilmSize previous = this.FilmSize;
                if ((previous != value))
                {
                    this.ValidateProperty("FilmSize", value);
                    if ((value != null))
                    {
                        this.FilmSizeID = value.ID;
                    }
                    else
                    {
                        this.FilmSizeID = default(int);
                    }
                    this._filmSize.Entity = value;
                    this.RaisePropertyChanged("FilmSize");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int FilmSizeID
        {
            get
            {
                return this._filmSizeID;
            }
            set
            {
                if ((this._filmSizeID != value))
                {
                    this.OnFilmSizeIDChanging(value);
                    this.RaiseDataMemberChanging("FilmSizeID");
                    this.ValidateProperty("FilmSizeID", value);
                    this._filmSizeID = value;
                    this.RaiseDataMemberChanged("FilmSizeID");
                    this.OnFilmSizeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeString' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string FilmSizeString
        {
            get
            {
                return this._filmSizeString;
            }
            set
            {
                if ((this._filmSizeString != value))
                {
                    this.OnFilmSizeStringChanging(value);
                    this.RaiseDataMemberChanging("FilmSizeString");
                    this.ValidateProperty("FilmSizeString", value);
                    this._filmSizeString = value;
                    this.RaiseDataMemberChanged("FilmSizeString");
                    this.OnFilmSizeStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilmSizeWithCount' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string FilmSizeWithCount
        {
            get
            {
                return this._filmSizeWithCount;
            }
            set
            {
                if ((this._filmSizeWithCount != value))
                {
                    this.OnFilmSizeWithCountChanging(value);
                    this.ValidateProperty("FilmSizeWithCount", value);
                    this._filmSizeWithCount = value;
                    this.RaisePropertyChanged("FilmSizeWithCount");
                    this.OnFilmSizeWithCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FPSLNo' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> FPSLNo
        {
            get
            {
                return this._fpslNo;
            }
            set
            {
                if ((this._fpslNo != value))
                {
                    this.OnFPSLNoChanging(value);
                    this.RaiseDataMemberChanging("FPSLNo");
                    this.ValidateProperty("FPSLNo", value);
                    this._fpslNo = value;
                    this.RaiseDataMemberChanged("FPSLNo");
                    this.OnFPSLNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        [DataMember()]
        public string Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Remark"/> entity.
        /// </summary>
        [Association("Remark_RGReportRow", "RemarkID", "ID", IsForeignKey=true)]
        public Remark Remark
        {
            get
            {
                if ((this._remark == null))
                {
                    this._remark = new EntityRef<Remark>(this, "Remark", this.FilterRemark);
                }
                return this._remark.Entity;
            }
            set
            {
                Remark previous = this.Remark;
                if ((previous != value))
                {
                    this.ValidateProperty("Remark", value);
                    if ((value != null))
                    {
                        this.RemarkID = value.ID;
                    }
                    else
                    {
                        this.RemarkID = default(Nullable<int>);
                    }
                    this._remark.Entity = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RemarkID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> RemarkID
        {
            get
            {
                return this._remarkID;
            }
            set
            {
                if ((this._remarkID != value))
                {
                    this.OnRemarkIDChanging(value);
                    this.RaiseDataMemberChanging("RemarkID");
                    this.ValidateProperty("RemarkID", value);
                    this._remarkID = value;
                    this.RaiseDataMemberChanged("RemarkID");
                    this.OnRemarkIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RemarkText' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string RemarkText
        {
            get
            {
                return this._remarkText;
            }
            set
            {
                if ((this._remarkText != value))
                {
                    this.OnRemarkTextChanging(value);
                    this.RaiseDataMemberChanging("RemarkText");
                    this.ValidateProperty("RemarkText", value);
                    this._remarkText = value;
                    this.RaiseDataMemberChanged("RemarkText");
                    this.OnRemarkTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RGReport"/> entity.
        /// </summary>
        [Association("RGReport_RGReportRow", "RGReportID", "ID", IsForeignKey=true)]
        public RGReport RGReport
        {
            get
            {
                if ((this._rgReport == null))
                {
                    this._rgReport = new EntityRef<RGReport>(this, "RGReport", this.FilterRGReport);
                }
                return this._rgReport.Entity;
            }
            set
            {
                RGReport previous = this.RGReport;
                if ((previous != value))
                {
                    this.ValidateProperty("RGReport", value);
                    if ((previous != null))
                    {
                        this._rgReport.Entity = null;
                        previous.RGReportRows.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RGReportID = value.ID;
                    }
                    else
                    {
                        this.RGReportID = default(int);
                    }
                    this._rgReport.Entity = value;
                    if ((value != null))
                    {
                        value.RGReportRows.Add(this);
                    }
                    this.RaisePropertyChanged("RGReport");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RGReportID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RGReportID
        {
            get
            {
                return this._rgReportID;
            }
            set
            {
                if ((this._rgReportID != value))
                {
                    this.OnRGReportIDChanging(value);
                    this.RaiseDataMemberChanging("RGReportID");
                    this.ValidateProperty("RGReportID", value);
                    this._rgReportID = value;
                    this.RaiseDataMemberChanged("RGReportID");
                    this.OnRGReportIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RGReportRowType"/> entity.
        /// </summary>
        [Association("RGReportRowType_RGReportRow", "RowTypeID", "ID", IsForeignKey=true)]
        public RGReportRowType RowType
        {
            get
            {
                if ((this._rowType == null))
                {
                    this._rowType = new EntityRef<RGReportRowType>(this, "RowType", this.FilterRowType);
                }
                return this._rowType.Entity;
            }
            set
            {
                RGReportRowType previous = this.RowType;
                if ((previous != value))
                {
                    this.ValidateProperty("RowType", value);
                    if ((value != null))
                    {
                        this.RowTypeID = value.ID;
                    }
                    else
                    {
                        this.RowTypeID = default(int);
                    }
                    this._rowType.Entity = value;
                    this.RaisePropertyChanged("RowType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int RowTypeID
        {
            get
            {
                return this._rowTypeID;
            }
            set
            {
                if ((this._rowTypeID != value))
                {
                    this.OnRowTypeIDChanging(value);
                    this.RaiseDataMemberChanging("RowTypeID");
                    this.ValidateProperty("RowTypeID", value);
                    this._rowTypeID = value;
                    this.RaiseDataMemberChanged("RowTypeID");
                    this.OnRowTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Segment' value.
        /// </summary>
        [DataMember()]
        public string Segment
        {
            get
            {
                return this._segment;
            }
            set
            {
                if ((this._segment != value))
                {
                    this.OnSegmentChanging(value);
                    this.RaiseDataMemberChanging("Segment");
                    this.ValidateProperty("Segment", value);
                    this._segment = value;
                    this.RaiseDataMemberChanged("Segment");
                    this.OnSegmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sensitivity' value.
        /// </summary>
        [DataMember()]
        public string Sensitivity
        {
            get
            {
                return this._sensitivity;
            }
            set
            {
                if ((this._sensitivity != value))
                {
                    this.OnSensitivityChanging(value);
                    this.RaiseDataMemberChanging("Sensitivity");
                    this.ValidateProperty("Sensitivity", value);
                    this._sensitivity = value;
                    this.RaiseDataMemberChanged("Sensitivity");
                    this.OnSensitivityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SFD' value.
        /// </summary>
        [DataMember()]
        public int SFD
        {
            get
            {
                return this._sfd;
            }
            set
            {
                if ((this._sfd != value))
                {
                    this.OnSFDChanging(value);
                    this.RaiseDataMemberChanging("SFD");
                    this.ValidateProperty("SFD", value);
                    this._sfd = value;
                    this.RaiseDataMemberChanged("SFD");
                    this.OnSFDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SlNo' value.
        /// </summary>
        [DataMember()]
        public int SlNo
        {
            get
            {
                return this._slNo;
            }
            set
            {
                if ((this._slNo != value))
                {
                    this.OnSlNoChanging(value);
                    this.RaiseDataMemberChanging("SlNo");
                    this.ValidateProperty("SlNo", value);
                    this._slNo = value;
                    this.RaiseDataMemberChanged("SlNo");
                    this.OnSlNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Technician"/> entity.
        /// </summary>
        [Association("Technician_RGReportRow", "TechnicianID", "ID", IsForeignKey=true)]
        public Technician Technician
        {
            get
            {
                if ((this._technician == null))
                {
                    this._technician = new EntityRef<Technician>(this, "Technician", this.FilterTechnician);
                }
                return this._technician.Entity;
            }
            set
            {
                Technician previous = this.Technician;
                if ((previous != value))
                {
                    this.ValidateProperty("Technician", value);
                    if ((value != null))
                    {
                        this.TechnicianID = value.ID;
                    }
                    else
                    {
                        this.TechnicianID = default(Nullable<int>);
                    }
                    this._technician.Entity = value;
                    this.RaisePropertyChanged("Technician");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TechnicianID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> TechnicianID
        {
            get
            {
                return this._technicianID;
            }
            set
            {
                if ((this._technicianID != value))
                {
                    this.OnTechnicianIDChanging(value);
                    this.RaiseDataMemberChanging("TechnicianID");
                    this.ValidateProperty("TechnicianID", value);
                    this._technicianID = value;
                    this.RaiseDataMemberChanged("TechnicianID");
                    this.OnTechnicianIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TechnicianText' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string TechnicianText
        {
            get
            {
                return this._technicianText;
            }
            set
            {
                if ((this._technicianText != value))
                {
                    this.OnTechnicianTextChanging(value);
                    this.RaiseDataMemberChanging("TechnicianText");
                    this.ValidateProperty("TechnicianText", value);
                    this._technicianText = value;
                    this.RaiseDataMemberChanged("TechnicianText");
                    this.OnTechnicianTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Technique' value.
        /// </summary>
        [DataMember()]
        public string Technique
        {
            get
            {
                return this._technique;
            }
            set
            {
                if ((this._technique != value))
                {
                    this.OnTechniqueChanging(value);
                    this.RaiseDataMemberChanging("Technique");
                    this.ValidateProperty("Technique", value);
                    this._technique = value;
                    this.RaiseDataMemberChanged("Technique");
                    this.OnTechniqueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Thickness' value.
        /// </summary>
        [DataMember()]
        public int Thickness
        {
            get
            {
                return this._thickness;
            }
            set
            {
                if ((this._thickness != value))
                {
                    this.OnThicknessChanging(value);
                    this.RaiseDataMemberChanging("Thickness");
                    this.ValidateProperty("Thickness", value);
                    this._thickness = value;
                    this.RaiseDataMemberChanged("Thickness");
                    this.OnThicknessChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThicknessRange' value.
        /// </summary>
        [DataMember()]
        public string ThicknessRange
        {
            get
            {
                return this._thicknessRange;
            }
            set
            {
                if ((this._thicknessRange != value))
                {
                    this.OnThicknessRangeChanging(value);
                    this.RaiseDataMemberChanging("ThicknessRange");
                    this.ValidateProperty("ThicknessRange", value);
                    this._thicknessRange = value;
                    this.RaiseDataMemberChanged("ThicknessRange");
                    this.OnThicknessRangeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Welder"/> entity.
        /// </summary>
        [Association("Welder_RGReportRow", "WelderID", "ID", IsForeignKey=true)]
        public Welder Welder
        {
            get
            {
                if ((this._welder == null))
                {
                    this._welder = new EntityRef<Welder>(this, "Welder", this.FilterWelder);
                }
                return this._welder.Entity;
            }
            set
            {
                Welder previous = this.Welder;
                if ((previous != value))
                {
                    this.ValidateProperty("Welder", value);
                    if ((value != null))
                    {
                        this.WelderID = value.ID;
                    }
                    else
                    {
                        this.WelderID = default(Nullable<int>);
                    }
                    this._welder.Entity = value;
                    this.RaisePropertyChanged("Welder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WelderID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> WelderID
        {
            get
            {
                return this._welderID;
            }
            set
            {
                if ((this._welderID != value))
                {
                    this.OnWelderIDChanging(value);
                    this.RaiseDataMemberChanging("WelderID");
                    this.ValidateProperty("WelderID", value);
                    this._welderID = value;
                    this.RaiseDataMemberChanged("WelderID");
                    this.OnWelderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WelderText' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string WelderText
        {
            get
            {
                return this._welderText;
            }
            set
            {
                if ((this._welderText != value))
                {
                    this.OnWelderTextChanging(value);
                    this.RaiseDataMemberChanging("WelderText");
                    this.ValidateProperty("WelderText", value);
                    this._welderText = value;
                    this.RaiseDataMemberChanged("WelderText");
                    this.OnWelderTextChanged();
                }
            }
        }
        
        private bool FilterEnergy(Energy entity)
        {
            return (entity.ID == this.EnergyID);
        }
        
        private bool FilterFilmSize(FilmSize entity)
        {
            return (entity.ID == this.FilmSizeID);
        }
        
        private bool FilterRemark(Remark entity)
        {
            return (entity.ID == this.RemarkID);
        }
        
        private bool FilterRGReport(RGReport entity)
        {
            return (entity.ID == this.RGReportID);
        }
        
        private bool FilterRowType(RGReportRowType entity)
        {
            return (entity.ID == this.RowTypeID);
        }
        
        private bool FilterTechnician(Technician entity)
        {
            return (entity.ID == this.TechnicianID);
        }
        
        private bool FilterWelder(Welder entity)
        {
            return (entity.ID == this.WelderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RGReportRowType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class RGReportRowType : Entity
    {
        
        private int _id;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RGReportRowType"/> class.
        /// </summary>
        public RGReportRowType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RGStatus' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class RGStatus : Entity
    {
        
        private int _id;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RGStatus"/> class.
        /// </summary>
        public RGStatus()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RTStatusReportRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class RTStatusReportRow : Entity
    {
        
        private string _date;
        
        private string _fpNo;
        
        private Guid _id;
        
        private string _repairs;
        
        private string _reportTypeNo;
        
        private string _reshoots;
        
        private string _retakes;
        
        private string _rtNo;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(string value);
        partial void OnDateChanged();
        partial void OnFPNoChanging(string value);
        partial void OnFPNoChanged();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnRepairsChanging(string value);
        partial void OnRepairsChanged();
        partial void OnReportTypeNoChanging(string value);
        partial void OnReportTypeNoChanged();
        partial void OnReshootsChanging(string value);
        partial void OnReshootsChanged();
        partial void OnRetakesChanging(string value);
        partial void OnRetakesChanged();
        partial void OnRTNoChanging(string value);
        partial void OnRTNoChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RTStatusReportRow"/> class.
        /// </summary>
        public RTStatusReportRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FPNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string FPNo
        {
            get
            {
                return this._fpNo;
            }
            set
            {
                if ((this._fpNo != value))
                {
                    this.OnFPNoChanging(value);
                    this.RaiseDataMemberChanging("FPNo");
                    this.ValidateProperty("FPNo", value);
                    this._fpNo = value;
                    this.RaiseDataMemberChanged("FPNo");
                    this.OnFPNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Repairs' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Repairs
        {
            get
            {
                return this._repairs;
            }
            set
            {
                if ((this._repairs != value))
                {
                    this.OnRepairsChanging(value);
                    this.RaiseDataMemberChanging("Repairs");
                    this.ValidateProperty("Repairs", value);
                    this._repairs = value;
                    this.RaiseDataMemberChanged("Repairs");
                    this.OnRepairsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportTypeNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string ReportTypeNo
        {
            get
            {
                return this._reportTypeNo;
            }
            set
            {
                if ((this._reportTypeNo != value))
                {
                    this.OnReportTypeNoChanging(value);
                    this.RaiseDataMemberChanging("ReportTypeNo");
                    this.ValidateProperty("ReportTypeNo", value);
                    this._reportTypeNo = value;
                    this.RaiseDataMemberChanged("ReportTypeNo");
                    this.OnReportTypeNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Reshoots' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Reshoots
        {
            get
            {
                return this._reshoots;
            }
            set
            {
                if ((this._reshoots != value))
                {
                    this.OnReshootsChanging(value);
                    this.RaiseDataMemberChanging("Reshoots");
                    this.ValidateProperty("Reshoots", value);
                    this._reshoots = value;
                    this.RaiseDataMemberChanged("Reshoots");
                    this.OnReshootsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Retakes' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Retakes
        {
            get
            {
                return this._retakes;
            }
            set
            {
                if ((this._retakes != value))
                {
                    this.OnRetakesChanging(value);
                    this.RaiseDataMemberChanging("Retakes");
                    this.ValidateProperty("Retakes", value);
                    this._retakes = value;
                    this.RaiseDataMemberChanged("Retakes");
                    this.OnRetakesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RTNo' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string RTNo
        {
            get
            {
                return this._rtNo;
            }
            set
            {
                if ((this._rtNo != value))
                {
                    this.OnRTNoChanging(value);
                    this.RaiseDataMemberChanging("RTNo");
                    this.ValidateProperty("RTNo", value);
                    this._rtNo = value;
                    this.RaiseDataMemberChanged("RTNo");
                    this.OnRTNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SegmentClass' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class SegmentClass : Entity
    {
        
        private Guid _id;
        
        private Guid _locationID;
        
        private string _observations;
        
        private string _segment;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnLocationIDChanging(Guid value);
        partial void OnLocationIDChanged();
        partial void OnObservationsChanging(string value);
        partial void OnObservationsChanged();
        partial void OnSegmentChanging(string value);
        partial void OnSegmentChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentClass"/> class.
        /// </summary>
        public SegmentClass()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public Guid LocationID
        {
            get
            {
                return this._locationID;
            }
            set
            {
                if ((this._locationID != value))
                {
                    this.OnLocationIDChanging(value);
                    this.RaiseDataMemberChanging("LocationID");
                    this.ValidateProperty("LocationID", value);
                    this._locationID = value;
                    this.RaiseDataMemberChanged("LocationID");
                    this.OnLocationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Segment' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Segment
        {
            get
            {
                return this._segment;
            }
            set
            {
                if ((this._segment != value))
                {
                    this.OnSegmentChanging(value);
                    this.RaiseDataMemberChanging("Segment");
                    this.ValidateProperty("Segment", value);
                    this._segment = value;
                    this.RaiseDataMemberChanged("Segment");
                    this.OnSegmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Shift' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Shift : Entity
    {
        
        private int _id;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Shift"/> class.
        /// </summary>
        public Shift()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ShiftWisePerformanceRow' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class ShiftWisePerformanceRow : Entity
    {
        
        private string _date;
        
        private EntityCollection<FilmAreaRow> _filmAreaRows;
        
        private Guid _id;
        
        private double _rtPercent;
        
        private double _rtPercentByArea;
        
        private string _shift;
        
        private string _technicians;
        
        private int _totalFilmsTaken;
        
        private int _totalRetakes;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(string value);
        partial void OnDateChanged();
        partial void OnIDChanging(Guid value);
        partial void OnIDChanged();
        partial void OnRTPercentChanging(double value);
        partial void OnRTPercentChanged();
        partial void OnRTPercentByAreaChanging(double value);
        partial void OnRTPercentByAreaChanged();
        partial void OnShiftChanging(string value);
        partial void OnShiftChanged();
        partial void OnTechniciansChanging(string value);
        partial void OnTechniciansChanged();
        partial void OnTotalFilmsTakenChanging(int value);
        partial void OnTotalFilmsTakenChanged();
        partial void OnTotalRetakesChanging(int value);
        partial void OnTotalRetakesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ShiftWisePerformanceRow"/> class.
        /// </summary>
        public ShiftWisePerformanceRow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="FilmAreaRow"/> entity instances.
        /// </summary>
        [Association("FilmAreaRow", "ID", "ShiftWisePerformanceRowID")]
        public EntityCollection<FilmAreaRow> FilmAreaRows
        {
            get
            {
                if ((this._filmAreaRows == null))
                {
                    this._filmAreaRows = new EntityCollection<FilmAreaRow>(this, "FilmAreaRows", this.FilterFilmAreaRows);
                }
                return this._filmAreaRows;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RTPercent' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public double RTPercent
        {
            get
            {
                return this._rtPercent;
            }
            set
            {
                if ((this._rtPercent != value))
                {
                    this.OnRTPercentChanging(value);
                    this.RaiseDataMemberChanging("RTPercent");
                    this.ValidateProperty("RTPercent", value);
                    this._rtPercent = value;
                    this.RaiseDataMemberChanged("RTPercent");
                    this.OnRTPercentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RTPercentByArea' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public double RTPercentByArea
        {
            get
            {
                return this._rtPercentByArea;
            }
            set
            {
                if ((this._rtPercentByArea != value))
                {
                    this.OnRTPercentByAreaChanging(value);
                    this.RaiseDataMemberChanging("RTPercentByArea");
                    this.ValidateProperty("RTPercentByArea", value);
                    this._rtPercentByArea = value;
                    this.RaiseDataMemberChanged("RTPercentByArea");
                    this.OnRTPercentByAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Shift' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Shift
        {
            get
            {
                return this._shift;
            }
            set
            {
                if ((this._shift != value))
                {
                    this.OnShiftChanging(value);
                    this.RaiseDataMemberChanging("Shift");
                    this.ValidateProperty("Shift", value);
                    this._shift = value;
                    this.RaiseDataMemberChanged("Shift");
                    this.OnShiftChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Technicians' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public string Technicians
        {
            get
            {
                return this._technicians;
            }
            set
            {
                if ((this._technicians != value))
                {
                    this.OnTechniciansChanging(value);
                    this.RaiseDataMemberChanging("Technicians");
                    this.ValidateProperty("Technicians", value);
                    this._technicians = value;
                    this.RaiseDataMemberChanged("Technicians");
                    this.OnTechniciansChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalFilmsTaken' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int TotalFilmsTaken
        {
            get
            {
                return this._totalFilmsTaken;
            }
            set
            {
                if ((this._totalFilmsTaken != value))
                {
                    this.OnTotalFilmsTakenChanging(value);
                    this.RaiseDataMemberChanging("TotalFilmsTaken");
                    this.ValidateProperty("TotalFilmsTaken", value);
                    this._totalFilmsTaken = value;
                    this.RaiseDataMemberChanged("TotalFilmsTaken");
                    this.OnTotalFilmsTakenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalRetakes' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.NotMappedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [NotMappedAttribute()]
        // 
        [DataMember()]
        public int TotalRetakes
        {
            get
            {
                return this._totalRetakes;
            }
            set
            {
                if ((this._totalRetakes != value))
                {
                    this.OnTotalRetakesChanging(value);
                    this.RaiseDataMemberChanging("TotalRetakes");
                    this.ValidateProperty("TotalRetakes", value);
                    this._totalRetakes = value;
                    this.RaiseDataMemberChanged("TotalRetakes");
                    this.OnTotalRetakesChanged();
                }
            }
        }
        
        private bool FilterFilmAreaRows(FilmAreaRow entity)
        {
            return (entity.ShiftWisePerformanceRowID == this.ID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Technician' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Technician : Entity
    {
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Technician"/> class.
        /// </summary>
        public Technician()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ThicknessRangeForEnergy' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class ThicknessRangeForEnergy : Entity
    {
        
        private EntityRef<Energy> _energy;
        
        private int _energyID;
        
        private int _id;
        
        private double _thicknessFrom;
        
        private double _thicknessTo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEnergyIDChanging(int value);
        partial void OnEnergyIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnThicknessFromChanging(double value);
        partial void OnThicknessFromChanged();
        partial void OnThicknessToChanging(double value);
        partial void OnThicknessToChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ThicknessRangeForEnergy"/> class.
        /// </summary>
        public ThicknessRangeForEnergy()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Energy"/> entity.
        /// </summary>
        [Association("Energy_ThicknessRangeForEnergy", "EnergyID", "ID", IsForeignKey=true)]
        public Energy Energy
        {
            get
            {
                if ((this._energy == null))
                {
                    this._energy = new EntityRef<Energy>(this, "Energy", this.FilterEnergy);
                }
                return this._energy.Entity;
            }
            set
            {
                Energy previous = this.Energy;
                if ((previous != value))
                {
                    this.ValidateProperty("Energy", value);
                    if ((value != null))
                    {
                        this.EnergyID = value.ID;
                    }
                    else
                    {
                        this.EnergyID = default(int);
                    }
                    this._energy.Entity = value;
                    this.RaisePropertyChanged("Energy");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnergyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int EnergyID
        {
            get
            {
                return this._energyID;
            }
            set
            {
                if ((this._energyID != value))
                {
                    this.OnEnergyIDChanging(value);
                    this.RaiseDataMemberChanging("EnergyID");
                    this.ValidateProperty("EnergyID", value);
                    this._energyID = value;
                    this.RaiseDataMemberChanged("EnergyID");
                    this.OnEnergyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThicknessFrom' value.
        /// </summary>
        [DataMember()]
        public double ThicknessFrom
        {
            get
            {
                return this._thicknessFrom;
            }
            set
            {
                if ((this._thicknessFrom != value))
                {
                    this.OnThicknessFromChanging(value);
                    this.RaiseDataMemberChanging("ThicknessFrom");
                    this.ValidateProperty("ThicknessFrom", value);
                    this._thicknessFrom = value;
                    this.RaiseDataMemberChanged("ThicknessFrom");
                    this.OnThicknessFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThicknessTo' value.
        /// </summary>
        [DataMember()]
        public double ThicknessTo
        {
            get
            {
                return this._thicknessTo;
            }
            set
            {
                if ((this._thicknessTo != value))
                {
                    this.OnThicknessToChanging(value);
                    this.RaiseDataMemberChanging("ThicknessTo");
                    this.ValidateProperty("ThicknessTo", value);
                    this._thicknessTo = value;
                    this.RaiseDataMemberChanged("ThicknessTo");
                    this.OnThicknessToChanged();
                }
            }
        }
        
        private bool FilterEnergy(Energy entity)
        {
            return (entity.ID == this.EnergyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'UploadedFile' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class UploadedFile : Entity
    {
        
        private byte[] _fileData;
        
        private string _fileExtension;
        
        private string _fileName;
        
        private ulong _fileSize;
        
        private string _fileType;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFileDataChanging(byte[] value);
        partial void OnFileDataChanged();
        partial void OnFileExtensionChanging(string value);
        partial void OnFileExtensionChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnFileSizeChanging(ulong value);
        partial void OnFileSizeChanged();
        partial void OnFileTypeChanging(string value);
        partial void OnFileTypeChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadedFile"/> class.
        /// </summary>
        public UploadedFile()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FileData' value.
        /// </summary>
        [DataMember()]
        public byte[] FileData
        {
            get
            {
                return this._fileData;
            }
            set
            {
                if ((this._fileData != value))
                {
                    this.OnFileDataChanging(value);
                    this.RaiseDataMemberChanging("FileData");
                    this.ValidateProperty("FileData", value);
                    this._fileData = value;
                    this.RaiseDataMemberChanged("FileData");
                    this.OnFileDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileExtension' value.
        /// </summary>
        [DataMember()]
        public string FileExtension
        {
            get
            {
                return this._fileExtension;
            }
            set
            {
                if ((this._fileExtension != value))
                {
                    this.OnFileExtensionChanging(value);
                    this.RaiseDataMemberChanging("FileExtension");
                    this.ValidateProperty("FileExtension", value);
                    this._fileExtension = value;
                    this.RaiseDataMemberChanged("FileExtension");
                    this.OnFileExtensionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileName' value.
        /// </summary>
        [DataMember()]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.RaiseDataMemberChanging("FileName");
                    this.ValidateProperty("FileName", value);
                    this._fileName = value;
                    this.RaiseDataMemberChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileSize' value.
        /// </summary>
        [DataMember()]
        public ulong FileSize
        {
            get
            {
                return this._fileSize;
            }
            set
            {
                if ((this._fileSize != value))
                {
                    this.OnFileSizeChanging(value);
                    this.RaiseDataMemberChanging("FileSize");
                    this.ValidateProperty("FileSize", value);
                    this._fileSize = value;
                    this.RaiseDataMemberChanged("FileSize");
                    this.OnFileSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileType' value.
        /// </summary>
        [DataMember()]
        public string FileType
        {
            get
            {
                return this._fileType;
            }
            set
            {
                if ((this._fileType != value))
                {
                    this.OnFileTypeChanging(value);
                    this.RaiseDataMemberChanging("FileType");
                    this.ValidateProperty("FileType", value);
                    this._fileType = value;
                    this.RaiseDataMemberChanged("FileType");
                    this.OnFileTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Welder' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RadiographyTracking.Web.Models")]
    public sealed partial class Welder : Entity
    {
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Welder"/> class.
        /// </summary>
        public Welder()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute' is not visible in the client project 'RadiographyTracking'. Are you missing an assembly reference?
        // [DatabaseGeneratedAttribute(Identity)]
        // 
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace RadiographyTracking.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using RadiographyTracking.Web.Models;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'RadiographyService' DomainService.
    /// </summary>
    public sealed partial class RadiographyContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RadiographyContext"/> class.
        /// </summary>
        public RadiographyContext() : 
                this(new WebDomainClient<IRadiographyServiceContract>(new Uri("RadiographyTracking-Web-Services-RadiographyService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RadiographyContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The RadiographyService service URI.</param>
        public RadiographyContext(Uri serviceUri) : 
                this(new WebDomainClient<IRadiographyServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RadiographyContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public RadiographyContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Change"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Change> Changes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Change>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Coverage"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Coverage> Coverages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Coverage>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Customer"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Customer> Customers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Defect"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Defect> Defects
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Defect>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Direction"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Direction> Directions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Direction>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Energy"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Energy> Energies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Energy>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FilmConsumptionReportRow"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FilmConsumptionReportRow> FilmConsumptionReportRows
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FilmConsumptionReportRow>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FilmSize"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FilmSize> FilmSizes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FilmSize>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FilmStockReportRow"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FilmStockReportRow> FilmStockReportRows
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FilmStockReportRow>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FilmTransaction"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FilmTransaction> FilmTransactions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FilmTransaction>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FinalRTReport"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FinalRTReport> FinalRTReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FinalRTReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FixedPatternPerformanceRow"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FixedPatternPerformanceRow> FixedPatternPerformanceRows
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FixedPatternPerformanceRow>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FixedPattern"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FixedPattern> FixedPatterns
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FixedPattern>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FixedPatternTemplate"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FixedPatternTemplate> FixedPatternTemplates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FixedPatternTemplate>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Foundry"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Foundry> Foundries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Foundry>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FPTemplateRow"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<FPTemplateRow> FPTemplateRows
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FPTemplateRow>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RGReport"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<RGReport> RGReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RGReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Remark"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Remark> Remarks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Remark>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RGReportRow"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<RGReportRow> RGReportRows
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RGReportRow>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RGReportRowType"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<RGReportRowType> RGReportRowTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RGReportRowType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RGStatus"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<RGStatus> RGStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RGStatus>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RTStatusReportRow"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<RTStatusReportRow> RTStatusReportRows
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RTStatusReportRow>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Shift"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Shift> Shifts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Shift>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ShiftWisePerformanceRow"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<ShiftWisePerformanceRow> ShiftWisePerformanceRows
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ShiftWisePerformanceRow>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Technician"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Technician> Technicians
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Technician>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ThicknessRangeForEnergy"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<ThicknessRangeForEnergy> ThicknessRangeForEnergies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ThicknessRangeForEnergy>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UploadedFile"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<UploadedFile> UploadedFiles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UploadedFile>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Welder"/> entity instances that have been loaded into this <see cref="RadiographyContext"/> instance.
        /// </summary>
        public EntitySet<Welder> Welders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Welder>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Change"/> entity instances using the 'GetChanges' query.
        /// </summary>
        /// <param name="foundryName">The value for the 'foundryName' parameter of the query.</param>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Change"/> entity instances.</returns>
        public EntityQuery<Change> GetChangesQuery(string foundryName, Nullable<DateTime> fromDate, Nullable<DateTime> toDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("foundryName", foundryName);
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            this.ValidateMethod("GetChangesQuery", parameters);
            return base.CreateQuery<Change>("GetChanges", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Change"/> entity instances using the 'GetChangesByDate' query.
        /// </summary>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Change"/> entity instances.</returns>
        public EntityQuery<Change> GetChangesByDateQuery(DateTime fromDate, DateTime toDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            this.ValidateMethod("GetChangesByDateQuery", parameters);
            return base.CreateQuery<Change>("GetChangesByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Coverage"/> entity instances using the 'GetCoverages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Coverage"/> entity instances.</returns>
        public EntityQuery<Coverage> GetCoveragesQuery()
        {
            this.ValidateMethod("GetCoveragesQuery", null);
            return base.CreateQuery<Coverage>("GetCoverages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entity instances using the 'GetCustomers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entity instances.</returns>
        public EntityQuery<Customer> GetCustomersQuery()
        {
            this.ValidateMethod("GetCustomersQuery", null);
            return base.CreateQuery<Customer>("GetCustomers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entity instances using the 'GetCustomersFiltered' query.
        /// </summary>
        /// <param name="filter">The value for the 'filter' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entity instances.</returns>
        public EntityQuery<Customer> GetCustomersFilteredQuery(string filter)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("filter", filter);
            this.ValidateMethod("GetCustomersFilteredQuery", parameters);
            return base.CreateQuery<Customer>("GetCustomersFiltered", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Defect"/> entity instances using the 'GetDefects' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Defect"/> entity instances.</returns>
        public EntityQuery<Defect> GetDefectsQuery()
        {
            this.ValidateMethod("GetDefectsQuery", null);
            return base.CreateQuery<Defect>("GetDefects", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Direction"/> entity instances using the 'GetDirections' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Direction"/> entity instances.</returns>
        public EntityQuery<Direction> GetDirectionsQuery()
        {
            this.ValidateMethod("GetDirectionsQuery", null);
            return base.CreateQuery<Direction>("GetDirections", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Energy"/> entity instances using the 'GetEnergies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Energy"/> entity instances.</returns>
        public EntityQuery<Energy> GetEnergiesQuery()
        {
            this.ValidateMethod("GetEnergiesQuery", null);
            return base.CreateQuery<Energy>("GetEnergies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FilmConsumptionReportRow"/> entity instances using the 'GetFilmConsumptionReport' query.
        /// </summary>
        /// <param name="foundryId">The value for the 'foundryId' parameter of the query.</param>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FilmConsumptionReportRow"/> entity instances.</returns>
        public EntityQuery<FilmConsumptionReportRow> GetFilmConsumptionReportQuery(int foundryId, DateTime fromDate, DateTime toDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("foundryId", foundryId);
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            this.ValidateMethod("GetFilmConsumptionReportQuery", parameters);
            return base.CreateQuery<FilmConsumptionReportRow>("GetFilmConsumptionReport", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FilmSize"/> entity instances using the 'GetFilmSizes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FilmSize"/> entity instances.</returns>
        public EntityQuery<FilmSize> GetFilmSizesQuery()
        {
            this.ValidateMethod("GetFilmSizesQuery", null);
            return base.CreateQuery<FilmSize>("GetFilmSizes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FilmStockReportRow"/> entity instances using the 'GetFilmStockReport' query.
        /// </summary>
        /// <param name="foundryId">The value for the 'foundryId' parameter of the query.</param>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FilmStockReportRow"/> entity instances.</returns>
        public EntityQuery<FilmStockReportRow> GetFilmStockReportQuery(int foundryId, DateTime fromDate, DateTime toDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("foundryId", foundryId);
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            this.ValidateMethod("GetFilmStockReportQuery", parameters);
            return base.CreateQuery<FilmStockReportRow>("GetFilmStockReport", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FilmTransaction"/> entity instances using the 'GetFilmTransactions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FilmTransaction"/> entity instances.</returns>
        public EntityQuery<FilmTransaction> GetFilmTransactionsQuery()
        {
            this.ValidateMethod("GetFilmTransactionsQuery", null);
            return base.CreateQuery<FilmTransaction>("GetFilmTransactions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FilmTransaction"/> entity instances using the 'GetFilmTransactionsByDate' query.
        /// </summary>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FilmTransaction"/> entity instances.</returns>
        public EntityQuery<FilmTransaction> GetFilmTransactionsByDateQuery(DateTime fromDate, DateTime toDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            this.ValidateMethod("GetFilmTransactionsByDateQuery", parameters);
            return base.CreateQuery<FilmTransaction>("GetFilmTransactionsByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FinalRTReport"/> entity instances using the 'GetFinalRTReport' query.
        /// </summary>
        /// <param name="rtNo">The value for the 'rtNo' parameter of the query.</param>
        /// <param name="filter">The value for the 'filter' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FinalRTReport"/> entity instances.</returns>
        public EntityQuery<FinalRTReport> GetFinalRTReportQuery(string rtNo, string filter)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("rtNo", rtNo);
            parameters.Add("filter", filter);
            this.ValidateMethod("GetFinalRTReportQuery", parameters);
            return base.CreateQuery<FinalRTReport>("GetFinalRTReport", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FixedPatternPerformanceRow"/> entity instances using the 'GetFixedPatternPerformanceReport' query.
        /// </summary>
        /// <param name="fpNo">The value for the 'fpNo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FixedPatternPerformanceRow"/> entity instances.</returns>
        public EntityQuery<FixedPatternPerformanceRow> GetFixedPatternPerformanceReportQuery(string fpNo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fpNo", fpNo);
            this.ValidateMethod("GetFixedPatternPerformanceReportQuery", parameters);
            return base.CreateQuery<FixedPatternPerformanceRow>("GetFixedPatternPerformanceReport", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FixedPattern"/> entity instances using the 'GetFixedPatterns' query.
        /// </summary>
        /// <param name="filter">The value for the 'filter' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FixedPattern"/> entity instances.</returns>
        public EntityQuery<FixedPattern> GetFixedPatternsQuery(string filter)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("filter", filter);
            this.ValidateMethod("GetFixedPatternsQuery", parameters);
            return base.CreateQuery<FixedPattern>("GetFixedPatterns", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FixedPatternTemplate"/> entity instances using the 'GetFixedPatternTemplateForFP' query.
        /// </summary>
        /// <param name="fixedPatternNo">The value for the 'fixedPatternNo' parameter of the query.</param>
        /// <param name="strCoverage">The value for the 'strCoverage' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FixedPatternTemplate"/> entity instances.</returns>
        public EntityQuery<FixedPatternTemplate> GetFixedPatternTemplateForFPQuery(string fixedPatternNo, string strCoverage)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fixedPatternNo", fixedPatternNo);
            parameters.Add("strCoverage", strCoverage);
            this.ValidateMethod("GetFixedPatternTemplateForFPQuery", parameters);
            return base.CreateQuery<FixedPatternTemplate>("GetFixedPatternTemplateForFP", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FixedPatternTemplate"/> entity instances using the 'GetFixedPatternTemplates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FixedPatternTemplate"/> entity instances.</returns>
        public EntityQuery<FixedPatternTemplate> GetFixedPatternTemplatesQuery()
        {
            this.ValidateMethod("GetFixedPatternTemplatesQuery", null);
            return base.CreateQuery<FixedPatternTemplate>("GetFixedPatternTemplates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Foundry"/> entity instances using the 'GetFoundries' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Foundry"/> entity instances.</returns>
        public EntityQuery<Foundry> GetFoundriesQuery()
        {
            this.ValidateMethod("GetFoundriesQuery", null);
            return base.CreateQuery<Foundry>("GetFoundries", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FPTemplateRow"/> entity instances using the 'GetFPTemplateRows' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FPTemplateRow"/> entity instances.</returns>
        public EntityQuery<FPTemplateRow> GetFPTemplateRowsQuery()
        {
            this.ValidateMethod("GetFPTemplateRowsQuery", null);
            return base.CreateQuery<FPTemplateRow>("GetFPTemplateRows", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReport"/> entity instances using the 'GetNewRGReport' query.
        /// </summary>
        /// <param name="strFPNo">The value for the 'strFPNo' parameter of the query.</param>
        /// <param name="strCoverage">The value for the 'strCoverage' parameter of the query.</param>
        /// <param name="rtNo">The value for the 'rtNo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReport"/> entity instances.</returns>
        public EntityQuery<RGReport> GetNewRGReportQuery(string strFPNo, string strCoverage, string rtNo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("strFPNo", strFPNo);
            parameters.Add("strCoverage", strCoverage);
            parameters.Add("rtNo", rtNo);
            this.ValidateMethod("GetNewRGReportQuery", parameters);
            return base.CreateQuery<RGReport>("GetNewRGReport", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Remark"/> entity instances using the 'GetRemarks' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Remark"/> entity instances.</returns>
        public EntityQuery<Remark> GetRemarksQuery()
        {
            this.ValidateMethod("GetRemarksQuery", null);
            return base.CreateQuery<Remark>("GetRemarks", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReportRow"/> entity instances using the 'GetRGReportRows' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReportRow"/> entity instances.</returns>
        public EntityQuery<RGReportRow> GetRGReportRowsQuery()
        {
            this.ValidateMethod("GetRGReportRowsQuery", null);
            return base.CreateQuery<RGReportRow>("GetRGReportRows", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReportRow"/> entity instances using the 'GetRGReportRowsByFPNo' query.
        /// </summary>
        /// <param name="fpNo">The value for the 'fpNo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReportRow"/> entity instances.</returns>
        public EntityQuery<RGReportRow> GetRGReportRowsByFPNoQuery(string fpNo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fpNo", fpNo);
            this.ValidateMethod("GetRGReportRowsByFPNoQuery", parameters);
            return base.CreateQuery<RGReportRow>("GetRGReportRowsByFPNo", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReportRow"/> entity instances using the 'GetRGReportRowsByReportNo' query.
        /// </summary>
        /// <param name="ReportNo">The value for the 'ReportNo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReportRow"/> entity instances.</returns>
        public EntityQuery<RGReportRow> GetRGReportRowsByReportNoQuery(string ReportNo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ReportNo", ReportNo);
            this.ValidateMethod("GetRGReportRowsByReportNoQuery", parameters);
            return base.CreateQuery<RGReportRow>("GetRGReportRowsByReportNo", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReport"/> entity instances using the 'GetRGReports' query.
        /// </summary>
        /// <param name="RGReportNo">The value for the 'RGReportNo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReport"/> entity instances.</returns>
        public EntityQuery<RGReport> GetRGReportsQuery(string RGReportNo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("RGReportNo", RGReportNo);
            this.ValidateMethod("GetRGReportsQuery", parameters);
            return base.CreateQuery<RGReport>("GetRGReports", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReport"/> entity instances using the 'GetRGReportsByDate' query.
        /// </summary>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReport"/> entity instances.</returns>
        public EntityQuery<RGReport> GetRGReportsByDateQuery(DateTime fromDate, DateTime toDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            this.ValidateMethod("GetRGReportsByDateQuery", parameters);
            return base.CreateQuery<RGReport>("GetRGReportsByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReport"/> entity instances using the 'GetRGReportsByFPNo' query.
        /// </summary>
        /// <param name="fpNo">The value for the 'fpNo' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReport"/> entity instances.</returns>
        public EntityQuery<RGReport> GetRGReportsByFPNoQuery(string fpNo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fpNo", fpNo);
            this.ValidateMethod("GetRGReportsByFPNoQuery", parameters);
            return base.CreateQuery<RGReport>("GetRGReportsByFPNo", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGReportRowType"/> entity instances using the 'GetRGRowTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGReportRowType"/> entity instances.</returns>
        public EntityQuery<RGReportRowType> GetRGRowTypesQuery()
        {
            this.ValidateMethod("GetRGRowTypesQuery", null);
            return base.CreateQuery<RGReportRowType>("GetRGRowTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RGStatus"/> entity instances using the 'GetRGStatuses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RGStatus"/> entity instances.</returns>
        public EntityQuery<RGStatus> GetRGStatusesQuery()
        {
            this.ValidateMethod("GetRGStatusesQuery", null);
            return base.CreateQuery<RGStatus>("GetRGStatuses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RTStatusReportRow"/> entity instances using the 'GetRTStatus' query.
        /// </summary>
        /// <param name="foundryId">The value for the 'foundryId' parameter of the query.</param>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RTStatusReportRow"/> entity instances.</returns>
        public EntityQuery<RTStatusReportRow> GetRTStatusQuery(int foundryId, DateTime fromDate, DateTime toDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("foundryId", foundryId);
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            this.ValidateMethod("GetRTStatusQuery", parameters);
            return base.CreateQuery<RTStatusReportRow>("GetRTStatus", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Shift"/> entity instances using the 'GetShifts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Shift"/> entity instances.</returns>
        public EntityQuery<Shift> GetShiftsQuery()
        {
            this.ValidateMethod("GetShiftsQuery", null);
            return base.CreateQuery<Shift>("GetShifts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ShiftWisePerformanceRow"/> entity instances using the 'GetShiftWisePerformanceReport' query.
        /// </summary>
        /// <param name="fromDate">The value for the 'fromDate' parameter of the query.</param>
        /// <param name="toDate">The value for the 'toDate' parameter of the query.</param>
        /// <param name="technicianId">The value for the 'technicianId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ShiftWisePerformanceRow"/> entity instances.</returns>
        public EntityQuery<ShiftWisePerformanceRow> GetShiftWisePerformanceReportQuery(DateTime fromDate, DateTime toDate, int technicianId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fromDate", fromDate);
            parameters.Add("toDate", toDate);
            parameters.Add("technicianId", technicianId);
            this.ValidateMethod("GetShiftWisePerformanceReportQuery", parameters);
            return base.CreateQuery<ShiftWisePerformanceRow>("GetShiftWisePerformanceReport", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Technician"/> entity instances using the 'GetTechnicians' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Technician"/> entity instances.</returns>
        public EntityQuery<Technician> GetTechniciansQuery()
        {
            this.ValidateMethod("GetTechniciansQuery", null);
            return base.CreateQuery<Technician>("GetTechnicians", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ThicknessRangeForEnergy"/> entity instances using the 'GetThicknessRangesForEnergy' query.
        /// </summary>
        /// <param name="filter">The value for the 'filter' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ThicknessRangeForEnergy"/> entity instances.</returns>
        public EntityQuery<ThicknessRangeForEnergy> GetThicknessRangesForEnergyQuery(string filter)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("filter", filter);
            this.ValidateMethod("GetThicknessRangesForEnergyQuery", parameters);
            return base.CreateQuery<ThicknessRangeForEnergy>("GetThicknessRangesForEnergy", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UploadedFile"/> entity instances using the 'GetUploadedFiles' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UploadedFile"/> entity instances.</returns>
        public EntityQuery<UploadedFile> GetUploadedFilesQuery()
        {
            this.ValidateMethod("GetUploadedFilesQuery", null);
            return base.CreateQuery<UploadedFile>("GetUploadedFiles", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Welder"/> entity instances using the 'GetWelders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Welder"/> entity instances.</returns>
        public EntityQuery<Welder> GetWeldersQuery()
        {
            this.ValidateMethod("GetWeldersQuery", null);
            return base.CreateQuery<Welder>("GetWelders", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAddressStickers' method of the DomainService.
        /// </summary>
        /// <param name="reportNo">The value for the 'reportNo' parameter of this action.</param>
        /// <param name="cellNo">The value for the 'cellNo' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<AddressStickerRow>> GetAddressStickers(string reportNo, int cellNo, Action<InvokeOperation<List<AddressStickerRow>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("reportNo", reportNo);
            parameters.Add("cellNo", cellNo);
            this.ValidateMethod("GetAddressStickers", parameters);
            return ((InvokeOperation<List<AddressStickerRow>>)(this.InvokeOperation("GetAddressStickers", typeof(List<AddressStickerRow>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAddressStickers' method of the DomainService.
        /// </summary>
        /// <param name="reportNo">The value for the 'reportNo' parameter of this action.</param>
        /// <param name="cellNo">The value for the 'cellNo' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<List<AddressStickerRow>> GetAddressStickers(string reportNo, int cellNo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("reportNo", reportNo);
            parameters.Add("cellNo", cellNo);
            this.ValidateMethod("GetAddressStickers", parameters);
            return ((InvokeOperation<List<AddressStickerRow>>)(this.InvokeOperation("GetAddressStickers", typeof(List<AddressStickerRow>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAddressStickerTemplates' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetAddressStickerTemplates(Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            this.ValidateMethod("GetAddressStickerTemplates", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetAddressStickerTemplates", typeof(IEnumerable<string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAddressStickerTemplates' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetAddressStickerTemplates()
        {
            this.ValidateMethod("GetAddressStickerTemplates", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetAddressStickerTemplates", typeof(IEnumerable<string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetEndCustomerNames' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetEndCustomerNames(Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            this.ValidateMethod("GetEndCustomerNames", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetEndCustomerNames", typeof(IEnumerable<string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetEndCustomerNames' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetEndCustomerNames()
        {
            this.ValidateMethod("GetEndCustomerNames", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetEndCustomerNames", typeof(IEnumerable<string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRoles' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetRoles(Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            this.ValidateMethod("GetRoles", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetRoles", typeof(IEnumerable<string>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetRoles' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetRoles()
        {
            this.ValidateMethod("GetRoles", null);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetRoles", typeof(IEnumerable<string>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFile' method of the DomainService.
        /// </summary>
        /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
        /// <param name="fileType">The value for the 'fileType' parameter of this action.</param>
        /// <param name="fileExtension">The value for the 'fileExtension' parameter of this action.</param>
        /// <param name="fileSize">The value for the 'fileSize' parameter of this action.</param>
        /// <param name="fileData">The value for the 'fileData' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> UploadFile(string fileName, string fileType, string fileExtension, ulong fileSize, byte[] fileData, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileName", fileName);
            parameters.Add("fileType", fileType);
            parameters.Add("fileExtension", fileExtension);
            parameters.Add("fileSize", fileSize);
            parameters.Add("fileData", fileData);
            this.ValidateMethod("UploadFile", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UploadFile", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFile' method of the DomainService.
        /// </summary>
        /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
        /// <param name="fileType">The value for the 'fileType' parameter of this action.</param>
        /// <param name="fileExtension">The value for the 'fileExtension' parameter of this action.</param>
        /// <param name="fileSize">The value for the 'fileSize' parameter of this action.</param>
        /// <param name="fileData">The value for the 'fileData' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> UploadFile(string fileName, string fileType, string fileExtension, ulong fileSize, byte[] fileData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileName", fileName);
            parameters.Add("fileType", fileType);
            parameters.Add("fileExtension", fileExtension);
            parameters.Add("fileSize", fileSize);
            parameters.Add("fileData", fileData);
            this.ValidateMethod("UploadFile", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UploadFile", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RadiographyContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'RadiographyService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IRadiographyServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAddressStickers' operation.
            /// </summary>
            /// <param name="reportNo">The value for the 'reportNo' parameter of this action.</param>
            /// <param name="cellNo">The value for the 'cellNo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetAddressStickersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetAddressStickers", ReplyAction="http://tempuri.org/RadiographyService/GetAddressStickersResponse")]
            IAsyncResult BeginGetAddressStickers(string reportNo, int cellNo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAddressStickers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAddressStickers'.</param>
            /// <returns>The 'List`1' returned from the 'GetAddressStickers' operation.</returns>
            List<AddressStickerRow> EndGetAddressStickers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAddressStickerTemplates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetAddressStickerTemplatesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetAddressStickerTemplates", ReplyAction="http://tempuri.org/RadiographyService/GetAddressStickerTemplatesResponse")]
            IAsyncResult BeginGetAddressStickerTemplates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAddressStickerTemplates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAddressStickerTemplates'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetAddressStickerTemplates' operation.</returns>
            IEnumerable<string> EndGetAddressStickerTemplates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetChanges' operation.
            /// </summary>
            /// <param name="foundryName">The value for the 'foundryName' parameter of this action.</param>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetChanges", ReplyAction="http://tempuri.org/RadiographyService/GetChangesResponse")]
            [WebGet()]
            IAsyncResult BeginGetChanges(string foundryName, Nullable<DateTime> fromDate, Nullable<DateTime> toDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetChanges'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetChanges' operation.</returns>
            QueryResult<Change> EndGetChanges(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetChangesByDate' operation.
            /// </summary>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetChangesByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetChangesByDate", ReplyAction="http://tempuri.org/RadiographyService/GetChangesByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetChangesByDate(DateTime fromDate, DateTime toDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetChangesByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetChangesByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetChangesByDate' operation.</returns>
            QueryResult<Change> EndGetChangesByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetCompanies", ReplyAction="http://tempuri.org/RadiographyService/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCoverages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetCoveragesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetCoverages", ReplyAction="http://tempuri.org/RadiographyService/GetCoveragesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCoverages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCoverages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCoverages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCoverages' operation.</returns>
            QueryResult<Coverage> EndGetCoverages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetCustomersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetCustomers", ReplyAction="http://tempuri.org/RadiographyService/GetCustomersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
            QueryResult<Customer> EndGetCustomers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomersFiltered' operation.
            /// </summary>
            /// <param name="filter">The value for the 'filter' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetCustomersFilteredDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetCustomersFiltered", ReplyAction="http://tempuri.org/RadiographyService/GetCustomersFilteredResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomersFiltered(string filter, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomersFiltered'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomersFiltered'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomersFiltered' operation.</returns>
            QueryResult<Customer> EndGetCustomersFiltered(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDefects' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetDefectsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetDefects", ReplyAction="http://tempuri.org/RadiographyService/GetDefectsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDefects(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDefects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDefects'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDefects' operation.</returns>
            QueryResult<Defect> EndGetDefects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDirections' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetDirectionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetDirections", ReplyAction="http://tempuri.org/RadiographyService/GetDirectionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDirections(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDirections'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDirections'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDirections' operation.</returns>
            QueryResult<Direction> EndGetDirections(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEndCustomerNames' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetEndCustomerNamesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetEndCustomerNames", ReplyAction="http://tempuri.org/RadiographyService/GetEndCustomerNamesResponse")]
            IAsyncResult BeginGetEndCustomerNames(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEndCustomerNames'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEndCustomerNames'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetEndCustomerNames' operation.</returns>
            IEnumerable<string> EndGetEndCustomerNames(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEnergies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetEnergiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetEnergies", ReplyAction="http://tempuri.org/RadiographyService/GetEnergiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEnergies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEnergies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEnergies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEnergies' operation.</returns>
            QueryResult<Energy> EndGetEnergies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilmConsumptionReport' operation.
            /// </summary>
            /// <param name="foundryId">The value for the 'foundryId' parameter of this action.</param>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFilmConsumptionReportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFilmConsumptionReport", ReplyAction="http://tempuri.org/RadiographyService/GetFilmConsumptionReportResponse")]
            [WebGet()]
            IAsyncResult BeginGetFilmConsumptionReport(int foundryId, DateTime fromDate, DateTime toDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilmConsumptionReport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilmConsumptionReport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilmConsumptionReport' operation.</returns>
            QueryResult<FilmConsumptionReportRow> EndGetFilmConsumptionReport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilmSizes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFilmSizesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFilmSizes", ReplyAction="http://tempuri.org/RadiographyService/GetFilmSizesResponse")]
            [WebGet()]
            IAsyncResult BeginGetFilmSizes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilmSizes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilmSizes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilmSizes' operation.</returns>
            QueryResult<FilmSize> EndGetFilmSizes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilmStockReport' operation.
            /// </summary>
            /// <param name="foundryId">The value for the 'foundryId' parameter of this action.</param>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFilmStockReportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFilmStockReport", ReplyAction="http://tempuri.org/RadiographyService/GetFilmStockReportResponse")]
            [WebGet()]
            IAsyncResult BeginGetFilmStockReport(int foundryId, DateTime fromDate, DateTime toDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilmStockReport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilmStockReport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilmStockReport' operation.</returns>
            QueryResult<FilmStockReportRow> EndGetFilmStockReport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilmTransactions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFilmTransactionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFilmTransactions", ReplyAction="http://tempuri.org/RadiographyService/GetFilmTransactionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFilmTransactions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilmTransactions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilmTransactions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilmTransactions' operation.</returns>
            QueryResult<FilmTransaction> EndGetFilmTransactions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilmTransactionsByDate' operation.
            /// </summary>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFilmTransactionsByDateDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFilmTransactionsByDate", ReplyAction="http://tempuri.org/RadiographyService/GetFilmTransactionsByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetFilmTransactionsByDate(DateTime fromDate, DateTime toDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilmTransactionsByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilmTransactionsByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilmTransactionsByDate' operation.</returns>
            QueryResult<FilmTransaction> EndGetFilmTransactionsByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFinalRTReport' operation.
            /// </summary>
            /// <param name="rtNo">The value for the 'rtNo' parameter of this action.</param>
            /// <param name="filter">The value for the 'filter' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFinalRTReportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFinalRTReport", ReplyAction="http://tempuri.org/RadiographyService/GetFinalRTReportResponse")]
            [WebGet()]
            IAsyncResult BeginGetFinalRTReport(string rtNo, string filter, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFinalRTReport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFinalRTReport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFinalRTReport' operation.</returns>
            QueryResult<FinalRTReport> EndGetFinalRTReport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFixedPatternPerformanceReport' operation.
            /// </summary>
            /// <param name="fpNo">The value for the 'fpNo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFixedPatternPerformanceReportDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFixedPatternPerformanceReport", ReplyAction="http://tempuri.org/RadiographyService/GetFixedPatternPerformanceReportResponse")]
            [WebGet()]
            IAsyncResult BeginGetFixedPatternPerformanceReport(string fpNo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFixedPatternPerformanceReport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFixedPatternPerformanceReport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFixedPatternPerformanceReport' operation.</returns>
            QueryResult<FixedPatternPerformanceRow> EndGetFixedPatternPerformanceReport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFixedPatterns' operation.
            /// </summary>
            /// <param name="filter">The value for the 'filter' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFixedPatternsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFixedPatterns", ReplyAction="http://tempuri.org/RadiographyService/GetFixedPatternsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFixedPatterns(string filter, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFixedPatterns'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFixedPatterns'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFixedPatterns' operation.</returns>
            QueryResult<FixedPattern> EndGetFixedPatterns(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFixedPatternTemplateForFP' operation.
            /// </summary>
            /// <param name="fixedPatternNo">The value for the 'fixedPatternNo' parameter of this action.</param>
            /// <param name="strCoverage">The value for the 'strCoverage' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFixedPatternTemplateForFPDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFixedPatternTemplateForFP", ReplyAction="http://tempuri.org/RadiographyService/GetFixedPatternTemplateForFPResponse")]
            [WebGet()]
            IAsyncResult BeginGetFixedPatternTemplateForFP(string fixedPatternNo, string strCoverage, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFixedPatternTemplateForFP'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFixedPatternTemplateForFP'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFixedPatternTemplateForFP' operation.</returns>
            QueryResult<FixedPatternTemplate> EndGetFixedPatternTemplateForFP(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFixedPatternTemplates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFixedPatternTemplatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFixedPatternTemplates", ReplyAction="http://tempuri.org/RadiographyService/GetFixedPatternTemplatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetFixedPatternTemplates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFixedPatternTemplates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFixedPatternTemplates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFixedPatternTemplates' operation.</returns>
            QueryResult<FixedPatternTemplate> EndGetFixedPatternTemplates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFoundries' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFoundriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFoundries", ReplyAction="http://tempuri.org/RadiographyService/GetFoundriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetFoundries(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFoundries'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFoundries'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFoundries' operation.</returns>
            QueryResult<Foundry> EndGetFoundries(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFPTemplateRows' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetFPTemplateRowsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetFPTemplateRows", ReplyAction="http://tempuri.org/RadiographyService/GetFPTemplateRowsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFPTemplateRows(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFPTemplateRows'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFPTemplateRows'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFPTemplateRows' operation.</returns>
            QueryResult<FPTemplateRow> EndGetFPTemplateRows(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNewRGReport' operation.
            /// </summary>
            /// <param name="strFPNo">The value for the 'strFPNo' parameter of this action.</param>
            /// <param name="strCoverage">The value for the 'strCoverage' parameter of this action.</param>
            /// <param name="rtNo">The value for the 'rtNo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetNewRGReportDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetNewRGReport", ReplyAction="http://tempuri.org/RadiographyService/GetNewRGReportResponse")]
            [WebGet()]
            IAsyncResult BeginGetNewRGReport(string strFPNo, string strCoverage, string rtNo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNewRGReport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNewRGReport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNewRGReport' operation.</returns>
            QueryResult<RGReport> EndGetNewRGReport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRemarks' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRemarksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRemarks", ReplyAction="http://tempuri.org/RadiographyService/GetRemarksResponse")]
            [WebGet()]
            IAsyncResult BeginGetRemarks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRemarks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRemarks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRemarks' operation.</returns>
            QueryResult<Remark> EndGetRemarks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGReportRows' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGReportRowsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGReportRows", ReplyAction="http://tempuri.org/RadiographyService/GetRGReportRowsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGReportRows(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGReportRows'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGReportRows'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGReportRows' operation.</returns>
            QueryResult<RGReportRow> EndGetRGReportRows(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGReportRowsByFPNo' operation.
            /// </summary>
            /// <param name="fpNo">The value for the 'fpNo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGReportRowsByFPNoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGReportRowsByFPNo", ReplyAction="http://tempuri.org/RadiographyService/GetRGReportRowsByFPNoResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGReportRowsByFPNo(string fpNo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGReportRowsByFPNo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGReportRowsByFPNo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGReportRowsByFPNo' operation.</returns>
            QueryResult<RGReportRow> EndGetRGReportRowsByFPNo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGReportRowsByReportNo' operation.
            /// </summary>
            /// <param name="ReportNo">The value for the 'ReportNo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGReportRowsByReportNoDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGReportRowsByReportNo", ReplyAction="http://tempuri.org/RadiographyService/GetRGReportRowsByReportNoResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGReportRowsByReportNo(string ReportNo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGReportRowsByReportNo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGReportRowsByReportNo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGReportRowsByReportNo' operation.</returns>
            QueryResult<RGReportRow> EndGetRGReportRowsByReportNo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGReports' operation.
            /// </summary>
            /// <param name="RGReportNo">The value for the 'RGReportNo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGReportsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGReports", ReplyAction="http://tempuri.org/RadiographyService/GetRGReportsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGReports(string RGReportNo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGReports'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGReports'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGReports' operation.</returns>
            QueryResult<RGReport> EndGetRGReports(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGReportsByDate' operation.
            /// </summary>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGReportsByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGReportsByDate", ReplyAction="http://tempuri.org/RadiographyService/GetRGReportsByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGReportsByDate(DateTime fromDate, DateTime toDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGReportsByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGReportsByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGReportsByDate' operation.</returns>
            QueryResult<RGReport> EndGetRGReportsByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGReportsByFPNo' operation.
            /// </summary>
            /// <param name="fpNo">The value for the 'fpNo' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGReportsByFPNoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGReportsByFPNo", ReplyAction="http://tempuri.org/RadiographyService/GetRGReportsByFPNoResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGReportsByFPNo(string fpNo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGReportsByFPNo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGReportsByFPNo'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGReportsByFPNo' operation.</returns>
            QueryResult<RGReport> EndGetRGReportsByFPNo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGRowTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGRowTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGRowTypes", ReplyAction="http://tempuri.org/RadiographyService/GetRGRowTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGRowTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGRowTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGRowTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGRowTypes' operation.</returns>
            QueryResult<RGReportRowType> EndGetRGRowTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRGStatuses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRGStatusesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRGStatuses", ReplyAction="http://tempuri.org/RadiographyService/GetRGStatusesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRGStatuses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRGStatuses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRGStatuses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRGStatuses' operation.</returns>
            QueryResult<RGStatus> EndGetRGStatuses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRolesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRoles", ReplyAction="http://tempuri.org/RadiographyService/GetRolesResponse")]
            IAsyncResult BeginGetRoles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoles'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetRoles' operation.</returns>
            IEnumerable<string> EndGetRoles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRTStatus' operation.
            /// </summary>
            /// <param name="foundryId">The value for the 'foundryId' parameter of this action.</param>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetRTStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetRTStatus", ReplyAction="http://tempuri.org/RadiographyService/GetRTStatusResponse")]
            [WebGet()]
            IAsyncResult BeginGetRTStatus(int foundryId, DateTime fromDate, DateTime toDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRTStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRTStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRTStatus' operation.</returns>
            QueryResult<RTStatusReportRow> EndGetRTStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetShifts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetShiftsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetShifts", ReplyAction="http://tempuri.org/RadiographyService/GetShiftsResponse")]
            [WebGet()]
            IAsyncResult BeginGetShifts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetShifts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetShifts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetShifts' operation.</returns>
            QueryResult<Shift> EndGetShifts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetShiftWisePerformanceReport' operation.
            /// </summary>
            /// <param name="fromDate">The value for the 'fromDate' parameter of this action.</param>
            /// <param name="toDate">The value for the 'toDate' parameter of this action.</param>
            /// <param name="technicianId">The value for the 'technicianId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetShiftWisePerformanceReportDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetShiftWisePerformanceReport", ReplyAction="http://tempuri.org/RadiographyService/GetShiftWisePerformanceReportResponse")]
            [WebGet()]
            IAsyncResult BeginGetShiftWisePerformanceReport(DateTime fromDate, DateTime toDate, int technicianId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetShiftWisePerformanceReport'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetShiftWisePerformanceReport'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetShiftWisePerformanceReport' operation.</returns>
            QueryResult<ShiftWisePerformanceRow> EndGetShiftWisePerformanceReport(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTechnicians' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetTechniciansDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetTechnicians", ReplyAction="http://tempuri.org/RadiographyService/GetTechniciansResponse")]
            [WebGet()]
            IAsyncResult BeginGetTechnicians(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTechnicians'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTechnicians'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTechnicians' operation.</returns>
            QueryResult<Technician> EndGetTechnicians(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetThicknessRangesForEnergy' operation.
            /// </summary>
            /// <param name="filter">The value for the 'filter' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetThicknessRangesForEnergyDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetThicknessRangesForEnergy", ReplyAction="http://tempuri.org/RadiographyService/GetThicknessRangesForEnergyResponse")]
            [WebGet()]
            IAsyncResult BeginGetThicknessRangesForEnergy(string filter, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetThicknessRangesForEnergy'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetThicknessRangesForEnergy'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetThicknessRangesForEnergy' operation.</returns>
            QueryResult<ThicknessRangeForEnergy> EndGetThicknessRangesForEnergy(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUploadedFiles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetUploadedFilesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetUploadedFiles", ReplyAction="http://tempuri.org/RadiographyService/GetUploadedFilesResponse")]
            [WebGet()]
            IAsyncResult BeginGetUploadedFiles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUploadedFiles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUploadedFiles'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUploadedFiles' operation.</returns>
            QueryResult<UploadedFile> EndGetUploadedFiles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWelders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/GetWeldersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/GetWelders", ReplyAction="http://tempuri.org/RadiographyService/GetWeldersResponse")]
            [WebGet()]
            IAsyncResult BeginGetWelders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWelders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWelders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWelders' operation.</returns>
            QueryResult<Welder> EndGetWelders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UploadFile' operation.
            /// </summary>
            /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
            /// <param name="fileType">The value for the 'fileType' parameter of this action.</param>
            /// <param name="fileExtension">The value for the 'fileExtension' parameter of this action.</param>
            /// <param name="fileSize">The value for the 'fileSize' parameter of this action.</param>
            /// <param name="fileData">The value for the 'fileData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/UploadFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/UploadFile", ReplyAction="http://tempuri.org/RadiographyService/UploadFileResponse")]
            IAsyncResult BeginUploadFile(string fileName, string fileType, string fileExtension, ulong fileSize, byte[] fileData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUploadFile'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUploadFile'.</param>
            /// <returns>The 'Int32' returned from the 'UploadFile' operation.</returns>
            int EndUploadFile(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RadiographyService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RadiographyService/SubmitChanges", ReplyAction="http://tempuri.org/RadiographyService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class RadiographyContextEntityContainer : EntityContainer
        {
            
            public RadiographyContextEntityContainer()
            {
                this.CreateEntitySet<Change>(EntitySetOperations.Add);
                this.CreateEntitySet<Company>(EntitySetOperations.Edit);
                this.CreateEntitySet<Coverage>(EntitySetOperations.All);
                this.CreateEntitySet<Customer>(EntitySetOperations.All);
                this.CreateEntitySet<Defect>(EntitySetOperations.All);
                this.CreateEntitySet<Direction>(EntitySetOperations.None);
                this.CreateEntitySet<Energy>(EntitySetOperations.All);
                this.CreateEntitySet<FilmAreaRow>(EntitySetOperations.None);
                this.CreateEntitySet<FilmConsumptionReportRow>(EntitySetOperations.None);
                this.CreateEntitySet<FilmSize>(EntitySetOperations.All);
                this.CreateEntitySet<FilmStockReportRow>(EntitySetOperations.None);
                this.CreateEntitySet<FilmTransaction>(EntitySetOperations.All);
                this.CreateEntitySet<FinalRTReport>(EntitySetOperations.None);
                this.CreateEntitySet<FinalRTReportRow>(EntitySetOperations.None);
                this.CreateEntitySet<FixedPattern>(EntitySetOperations.All);
                this.CreateEntitySet<FixedPatternPerformanceRow>(EntitySetOperations.None);
                this.CreateEntitySet<FixedPatternTemplate>(EntitySetOperations.All);
                this.CreateEntitySet<Foundry>(EntitySetOperations.All);
                this.CreateEntitySet<FPTemplateRow>(EntitySetOperations.All);
                this.CreateEntitySet<LocationClass>(EntitySetOperations.None);
                this.CreateEntitySet<Remark>(EntitySetOperations.None);
                this.CreateEntitySet<RGReport>((EntitySetOperations.Edit | EntitySetOperations.Remove));
                this.CreateEntitySet<RGReportRow>(EntitySetOperations.All);
                this.CreateEntitySet<RGReportRowType>(EntitySetOperations.None);
                this.CreateEntitySet<RGStatus>(EntitySetOperations.None);
                this.CreateEntitySet<RTStatusReportRow>(EntitySetOperations.None);
                this.CreateEntitySet<SegmentClass>(EntitySetOperations.None);
                this.CreateEntitySet<Shift>(EntitySetOperations.None);
                this.CreateEntitySet<ShiftWisePerformanceRow>(EntitySetOperations.None);
                this.CreateEntitySet<Technician>(EntitySetOperations.All);
                this.CreateEntitySet<ThicknessRangeForEnergy>(EntitySetOperations.All);
                this.CreateEntitySet<UploadedFile>(EntitySetOperations.Add);
                this.CreateEntitySet<Welder>(EntitySetOperations.All);
            }
        }
    }
}
